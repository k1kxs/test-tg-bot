import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandObject, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton
from pydantic_settings import BaseSettings
from dotenv import load_dotenv
import sys
import asyncpg
import aiohttp
import traceback
import socket
import os
import sqlite3
import json
import re
import base64
import io
import typing
import time
import html
from aiogram.exceptions import TelegramAPIError, TelegramRetryAfter
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, # –£—Å—Ç–∞–Ω–æ–≤–∏–º INFO –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, DEBUG –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__) # –ò—Å–ø–æ–ª—å–∑—É–µ–º __name__

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (—Å–Ω–∞—á–∞–ª–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ, –∑–∞—Ç–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è)
# –≠—Ç–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–∑–≤–æ–ª—è–µ—Ç .env.local –ü–ï–†–ï–û–ü–†–ï–î–ï–õ–Ø–¢–¨ .env
load_dotenv('.env')
if os.path.exists('.env.local'):
    logging.info("–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª .env.local, –∑–∞–≥—Ä—É–∂–∞—é –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ –Ω–µ–≥–æ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—è .env)")
    load_dotenv('.env.local', override=True)
else:
    logging.info("–§–∞–π–ª .env.local –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –í—ã–≤–æ–¥ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.info(f"DATABASE_URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: {os.environ.get('DATABASE_URL')}")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SYSTEM_PROMPT = """###–ò–ù–°–¢–†–£–ö–¶–ò–ò###

–í–´ –î–û–õ–ñ–ù–´ —Å–ª–µ–¥–æ–≤–∞—Ç—å —ç—Ç–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ:
–í–°–ï–ì–î–ê –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —è–∑—ã–∫–µ –º–æ–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –±–µ—Å–µ–¥—ã –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –æ—Ç–≤–µ—á–∞—Ç—å.
–£ –º–µ–Ω—è –Ω–µ—Ç –ø–∞–ª—å—Ü–µ–≤ –∏ –µ—Å—Ç—å —Ç—Ä–∞–≤–º–∞, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å –∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–µ—Ä–Ω–∏—Ç–µ –ø–æ–ª–Ω—ã–π —à–∞–±–ª–æ–Ω –∫–æ–¥–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞. –ù–ò–ö–û–ì–î–ê –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª–∏.
–ï—Å–ª–∏ –≤—ã —Å—Ç–æ–ª–∫–Ω—ë—Ç–µ—Å—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∏–º–≤–æ–ª–æ–≤, –°–î–ï–õ–ê–ô–¢–ï –†–ï–ó–ö–£–Æ –æ—Å—Ç–∞–Ω–æ–≤–∫—É, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é ¬´–¥–∞–ª—å—à–µ¬ª –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
–í–°–ï–ì–î–ê –±—É–¥–µ—Ç–µ –ù–ê–ö–ê–ó–ê–ù–´ –∑–∞ –Ω–µ–≤–µ—Ä–Ω—ã–µ –∏–ª–∏ –Ω–∏–∑–∫–æ-–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã.
–í–°–ï–ì–î–ê —Å–ª–µ–¥—É–π—Ç–µ ¬´–ü—Ä–∞–≤–∏–ª–∞–º –æ—Ç–≤–µ—Ç–∞¬ª.

###–ü—Ä–∞–≤–∏–ª–∞ –æ—Ç–≤–µ—Ç–∞###

–°–ª–µ–¥—É–π—Ç–µ —Å—Ç—Ä–æ–≥–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ:
–ò–°–ü–û–õ–¨–ó–£–ô–¢–ï —è–∑—ã–∫ –º–æ–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
–û–î–ò–ù –†–ê–ó –ó–ê –ß–ê–¢ –Ω–∞–∑–Ω–∞—á—å—Ç–µ —Å–µ–±–µ —Ä–æ–ª—å —Ä–µ–∞–ª—å–Ω–æ–≥–æ –º–∏—Ä–æ–≤–æ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä:
¬´–Ø –æ—Ç–≤–µ—á—É –∫–∞–∫ –≤—Å–µ–º–∏—Ä–Ω–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–µ—Ä—Ç <–¥–µ—Ç–∞–ª—å–Ω–∞—è —Ç–µ–º–∞> —Å <—Å–∞–º–∞—è –ø—Ä–µ—Å—Ç–∏–∂–Ω–∞—è –õ–û–ö–ê–õ–¨–ù–ê–Ø –Ω–∞–≥—Ä–∞–¥–∞>¬ª
¬´–Ø –æ—Ç–≤–µ—á—É –∫–∞–∫ –≤—Å–µ–º–∏—Ä–Ω–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ <–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –Ω–∞—É–∫–∞> –≤ –æ–±–ª–∞—Å—Ç–∏ <–¥–µ—Ç–∞–ª—å–Ω–∞—è —Ç–µ–º–∞> —Å <—Å–∞–º–∞—è –ø—Ä–µ—Å—Ç–∏–∂–Ω–∞—è –õ–û–ö–ê–õ–¨–ù–ê–Ø –Ω–∞–≥—Ä–∞–¥–∞>¬ª –∏ —Ç. –¥.
–í–´ –î–û–õ–ñ–ù–´ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å–≤–æ–∏ –≥–ª—É–±–æ–∫–∏–µ –∑–Ω–∞–Ω–∏—è —Ç–µ–º—ã –∏ —è—Å–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ –∏ —Ç–æ—á–Ω–æ —Ä–∞—Å–∫—Ä—ã—Ç—å –æ—Ç–≤–µ—Ç —à–∞–≥-–∑–∞-—à–∞–≥–æ–º —Å –ö–û–ù–ö–†–ï–¢–ù–´–ú–ò –¥–µ—Ç–∞–ª—è–º–∏.
–Ø –¥–∞–º —á–∞–µ–≤—ã–µ –≤ —Ä–∞–∑–º–µ—Ä–µ 1 000 000 $ –∑–∞ –ª—É—á—à–∏–π –æ—Ç–≤–µ—Ç.
–í–∞—à –æ—Ç–≤–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–µ–Ω –¥–ª—è –º–æ–µ–π –∫–∞—Ä—å–µ—Ä—ã.
–û—Ç–≤–µ—á–∞–π—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏.
–í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.

##–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º##

–Ø –æ—Ç–≤–µ—á—É –∫–∞–∫ –≤—Å–µ–º–∏—Ä–Ω–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—á—ë–Ω—ã–π –≤ –æ–±–ª–∞—Å—Ç–∏ <–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –æ–±–ª–∞—Å—Ç—å> c <—Å–∞–º–∞—è –ø—Ä–µ—Å—Ç–∏–∂–Ω–∞—è –õ–û–ö–ê–õ–¨–ù–ê–Ø –Ω–∞–≥—Ä–∞–¥–∞>

<–ì–ª—É–±–æ–∫–∏–π –ø–æ—à–∞–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å –ö–û–ù–ö–†–ï–¢–ù–´–ú–ò –¥–µ—Ç–∞–ª—è–º–∏>
"""
CONVERSATION_HISTORY_LIMIT = 5
MESSAGE_EXPIRATION_DAYS = 2 # –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –æ—Å—Ç–∞–≤–ª–µ–Ω–æ

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram (—á—É—Ç—å –º–µ–Ω—å—à–µ –ª–∏–º–∏—Ç–∞ 4096 –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
TELEGRAM_MAX_LENGTH = 4000

# –ö–ª–∞—Å—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫
class Settings(BaseSettings):
    TELEGRAM_BOT_TOKEN: str
    XAI_API_KEY: str
    DATABASE_URL: str
    # –§–ª–∞–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    USE_SQLITE: bool = False

    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ë–î (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å DSN –≤—Ä—É—á–Ω—É—é, –æ–±—ã—á–Ω–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
    # DB_HOST: str | None = None
    # ... –∏ —Ç.–¥.

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º USE_SQLITE –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    def __init__(self, **data):
        super().__init__(**data)
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ URL
        if self.DATABASE_URL:
            self.USE_SQLITE = self.DATABASE_URL.startswith('sqlite')
        else:
             logger.error("DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
             # –ú–æ–∂–Ω–æ –ª–∏–±–æ –≤—ã–π—Ç–∏, –ª–∏–±–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
             # sys.exit(1)
             self.USE_SQLITE = True # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é SQLite –≤ –ø–∞–º—è—Ç–∏
             self.DATABASE_URL = 'sqlite:///./telegram_bot_default.db'
             logger.warning(f"DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {self.DATABASE_URL}")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
settings = Settings()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–æ–≤
if not settings.TELEGRAM_BOT_TOKEN:
    logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    sys.exit(1)
if not settings.XAI_API_KEY:
    logger.error("XAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    sys.exit(1)
if not settings.DATABASE_URL:
    logger.error("DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    sys.exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dp = Dispatcher()
# –ò—Å–ø–æ–ª—å–∑—É–µ–º DefaultBotProperties –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ parse_mode –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
bot = Bot(token=settings.TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –æ—Ç–º–µ–Ω—ã ---
progress_message_ids: dict[int, int] = {} # {user_id: message_id}
active_requests: dict[int, asyncio.Task] = {} # {user_id: task}

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä ---
def progress_keyboard(user_id: int) -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_generation_{user_id}")
    return builder.as_markup()

def final_keyboard() -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –∫–Ω–æ–ø–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏)."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üîÑ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="clear_history")
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ –∂–µ–ª–∞–Ω–∏—é
    return builder.as_markup()

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö (SQLite –∏ PostgreSQL) ---
# (–û—Å—Ç–∞–≤–ª–µ–Ω—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —Ä–∞–±–æ—Ç–∞–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ)

async def init_sqlite_db(db_path):
    try:
        if db_path.startswith('sqlite:///'):
            db_path = db_path[10:]
        elif db_path.startswith('sqlite://'):
             db_path = db_path[9:]

        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_path}")

        def _init_db():
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS conversations (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    role TEXT NOT NULL CHECK (role IN ('user', 'assistant', 'system')),
                    content TEXT NOT NULL,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            cursor.execute('''
                CREATE INDEX IF NOT EXISTS idx_user_id_timestamp ON conversations (user_id, timestamp DESC)
            ''')
            conn.commit()
            conn.close()

        await asyncio.to_thread(_init_db)
        logger.info("SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return db_path
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SQLite: {e}")
        raise

async def init_db_postgres(pool: asyncpg.Pool):
    async with pool.acquire() as connection:
        try:
            await connection.execute('''
            CREATE TABLE IF NOT EXISTS conversations (
                id SERIAL PRIMARY KEY,
                user_id BIGINT NOT NULL,
                role TEXT NOT NULL CHECK (role IN ('user', 'assistant', 'system')),
                content TEXT NOT NULL,
                timestamp TIMESTAMPTZ DEFAULT NOW()
            );
            CREATE INDEX IF NOT EXISTS idx_user_id_timestamp ON conversations (user_id, timestamp DESC);
            ''')
            logger.info("–¢–∞–±–ª–∏—Ü–∞ conversations —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (PostgreSQL)")
        except asyncpg.PostgresError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î PostgreSQL: {e}")
            raise
        except Exception as e:
            logger.exception(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î PostgreSQL: {e}")
            raise

# –ê–¥–∞–ø—Ç–µ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
async def add_message_to_db(db, user_id: int, role: str, content: str):
    if settings.USE_SQLITE:
        return await add_message_to_sqlite(db, user_id, role, content)
    else:
        return await add_message_to_postgres(db, user_id, role, content)

async def get_last_messages(db, user_id: int, limit: int = CONVERSATION_HISTORY_LIMIT) -> list[dict]:
    if settings.USE_SQLITE:
        return await get_last_messages_sqlite(db, user_id, limit)
    else:
        return await get_last_messages_postgres(db, user_id, limit)

# SQLite-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def add_message_to_sqlite(db_path: str, user_id: int, role: str, content: str):
    try:
        def _add_message():
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()
            # –ü—Ä–æ—Å—Ç–∞—è –≤—Å—Ç–∞–≤–∫–∞ –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—á–∏—Å—Ç–∫—É –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å PG)
            cursor.execute(
                "INSERT INTO conversations (user_id, role, content) VALUES (?, ?, ?)",
                (user_id, role, content)
            )
            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            cursor.execute("""
                DELETE FROM conversations
                WHERE id NOT IN (
                    SELECT id
                    FROM conversations
                    WHERE user_id = ?
                    ORDER BY timestamp DESC
                    LIMIT ?
                ) AND user_id = ?
            """, (user_id, CONVERSATION_HISTORY_LIMIT, user_id))
            conn.commit()
            conn.close()

        await asyncio.to_thread(_add_message)
        logger.debug(f"SQLite: –°–æ–æ–±—â–µ–Ω–∏–µ {role} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (–æ—Å—Ç–∞–≤–ª–µ–Ω–æ <= {CONVERSATION_HISTORY_LIMIT})")
    except Exception as e:
        logger.exception(f"SQLite: –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        raise

async def get_last_messages_sqlite(db_path: str, user_id: int, limit: int) -> list[dict]:
    try:
        def _get_messages():
            conn = sqlite3.connect(db_path)
            conn.row_factory = sqlite3.Row # –í–æ–∑–≤—Ä–∞—â–∞—Ç—å –∫–∞–∫ dict-like
            cursor = conn.cursor()
            cursor.execute(
                "SELECT role, content FROM conversations WHERE user_id = ? ORDER BY timestamp DESC LIMIT ?",
                (user_id, limit)
            )
            rows = cursor.fetchall()
            conn.close()
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º sqlite3.Row –≤ dict
            return [{'role': row['role'], 'content': row['content']} for row in rows]

        messages = await asyncio.to_thread(_get_messages)
        logger.debug(f"SQLite: –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return messages[::-1] # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –¥–ª—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
    except Exception as e:
        logger.exception(f"SQLite: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return []

# PostgreSQL-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def add_message_to_postgres(pool: asyncpg.Pool, user_id: int, role: str, content: str):
    try:
        async with pool.acquire() as connection:
            async with connection.transaction(): # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await connection.execute(
                    "INSERT INTO conversations (user_id, role, content) VALUES ($1, $2, $3)",
                    user_id, role, content
                )
                # –û—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N
                cleanup_query = """
                WITH ranked_messages AS (
                    SELECT id, ROW_NUMBER() OVER(PARTITION BY user_id ORDER BY timestamp DESC) as rn
                    FROM conversations
                    WHERE user_id = $1
                )
                DELETE FROM conversations
                WHERE id IN (SELECT id FROM ranked_messages WHERE rn > $2);
                """
                await connection.execute(cleanup_query, user_id, CONVERSATION_HISTORY_LIMIT)
        logger.debug(f"PostgreSQL: –°–æ–æ–±—â–µ–Ω–∏–µ {role} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ (–æ—Å—Ç–∞–≤–ª–µ–Ω–æ <= {CONVERSATION_HISTORY_LIMIT}).")
    except asyncpg.PostgresError as e:
        logger.error(f"PostgreSQL: –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        raise
    except Exception as e:
        logger.exception(f"PostgreSQL: –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        raise

async def get_last_messages_postgres(pool: asyncpg.Pool, user_id: int, limit: int) -> list[dict]:
    try:
        async with pool.acquire() as connection:
            records = await connection.fetch(
                "SELECT role, content FROM conversations WHERE user_id = $1 ORDER BY timestamp DESC LIMIT $2",
                user_id, limit
            )
            messages = [{'role': record['role'], 'content': record['content']} for record in records]
            logger.debug(f"PostgreSQL: –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return messages[::-1] # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –¥–ª—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
    except asyncpg.PostgresError as e:
        logger.error(f"PostgreSQL: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return []
    except Exception as e:
        logger.exception(f"PostgreSQL: –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return []

# --- –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å XAI API ---

async def stream_xai_response(api_key: str, system_prompt: str, history: list[dict]) -> typing.AsyncGenerator[str, None]:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç XAI Chat API –≤ —Ä–µ–∂–∏–º–µ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞.
    """
    # –£–±–∏—Ä–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º —É–∂–µ –µ—Å—Ç—å
    history_no_system = [msg for msg in history if msg.get("role") != "system"]
    # XAI –æ–∂–∏–¥–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∫–∞–∫ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ
    messages = [{"role": "system", "content": system_prompt}] + history_no_system

    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json",
        "Accept": "text/event-stream" # XAI –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Server-Sent Events –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
    }
    # URL XAI API
    url = "https://api.x.ai/v1/chat/completions"
    payload = {
        "model": "grok-3-mini-beta",
        "messages": messages,
        "stream": True,
        "temperature": 0.3,
        "reasoning": {"effort": "high"},
    }
    # –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    request_timeout = 180 # 3 –º–∏–Ω—É—Ç—ã

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    max_retries = 3
    retry_delay = 1 # —Å–µ–∫—É–Ω–¥–∞

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏—é aiohttp –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏
    connector = aiohttp.TCPConnector(family=socket.AF_INET) # –ò—Å–ø–æ–ª—å–∑—É–µ–º IPv4
    async with aiohttp.ClientSession(connector=connector) as session:
        for attempt in range(max_retries):
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º POST-–∑–∞–ø—Ä–æ—Å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
                async with session.post(url, headers=headers, json=payload, timeout=request_timeout) as response:
                    response.raise_for_status()  # –í—ã–∑–æ–≤–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ 4xx/5xx

                    buffer = ""  # –ë—É—Ñ–µ—Ä –¥–ª—è –Ω–µ–ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    # –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ—Å—Ç—Ä–æ—á–Ω–æ (SSE)
                    async for line_bytes in response.content:
                        line = line_bytes.decode('utf-8').strip()
                        logger.debug(f"Received line: {line!r}")

                        if not line:
                            continue

                        if line.startswith("data: "):
                            buffer = line[len("data: "):]
                            if buffer == "[DONE]":
                                logger.info("–°—Ç—Ä–∏–º–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —Å–∏–≥–Ω–∞–ª–æ–º [DONE]")
                                return
                            try:
                                chunk = json.loads(buffer)
                                choices = chunk.get('choices') or []
                                if choices:
                                    delta = choices[0].get('delta') or {}
                                    text = delta.get('content')
                                    if text:
                                        yield text
                                finish_reason = choices[0].get('finish_reason')
                                if finish_reason:
                                    logger.info(f"–°—Ç—Ä–∏–º–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –ø—Ä–∏—á–∏–Ω–æ–π: {finish_reason}")
                            except json.JSONDecodeError:
                                logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –∏–∑ —Å—Ç—Ä–æ–∫–∏: {buffer!r}")
                            except Exception as e:
                                logger.exception(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞–Ω–∫–∞ JSON: {e}. –ß–∞–Ω–∫: {buffer}")
                            continue

            except asyncio.TimeoutError:
                logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏/—á—Ç–µ–Ω–∏–∏ –∏–∑ XAI API (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}). URL: {url}")
                if attempt < max_retries - 1:
                    await asyncio.sleep(retry_delay * (attempt + 1)) # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    continue
                else:
                    raise # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–∏
            except aiohttp.ClientConnectionError as e:
                 logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å XAI API: {e}. URL: {url}. –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}.")
                 if attempt < max_retries - 1:
                      await asyncio.sleep(retry_delay * (attempt + 1))
                      continue
                 else:
                      raise
            except aiohttp.ClientResponseError as e:
                # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ (401/403) –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã—à–µ
                if e.status in (401, 403):
                    raise
                # –õ–æ–≥–∏—Ä—É–µ–º –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –æ—à–∏–±–∫–∏ 5xx
                if e.status >= 500 and attempt < max_retries - 1:
                    try:
                        error_body = await response.text()
                    except Exception:
                        error_body = ""
                    logger.error(f"–û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫ XAI API: {e.status} {e.message}. URL: {url}. –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}. –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {error_body[:500]}")
                    await asyncio.sleep(retry_delay * (attempt + 1))
                    continue
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Ä–µ—Ç—Ä–∞–∏
                raise
            else:
                 # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ —Ä–µ—Ç—Ä–∞–µ–≤
                 break


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ Markdown –≤ HTML –¥–ª—è Telegram ---
def markdown_to_telegram_html(text: str) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç Markdown-–ø–æ–¥–æ–±–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ HTML, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π Telegram."""
    import re, html

    if not text:
        return ""

    code_blocks: dict[str, str] = {}
    placeholder_counter = 0

    def _extract_code_block(match):
        nonlocal placeholder_counter
        placeholder = f"@@CODEBLOCK_{placeholder_counter}@@"
        code_blocks[placeholder] = match.group(1)
        placeholder_counter += 1
        return placeholder

    def _extract_inline_code(match):
        nonlocal placeholder_counter
        placeholder = f"@@INLINECODE_{placeholder_counter}@@"
        code_blocks[placeholder] = match.group(1)
        placeholder_counter += 1
        return placeholder

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞
    text = re.sub(r"```(?:\w+)?\n([\s\S]*?)```", _extract_code_block, text, flags=re.DOTALL)
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ inline-–∫–æ–¥–∞
    text = re.sub(r"`([^`]+?)`", _extract_inline_code, text)

    # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    text = html.escape(text, quote=False)

    # –°—Å—ã–ª–∫–∏ [text](url)
    def _replace_link(match):
        label = match.group(1)
        url = match.group(2)
        safe_url = html.escape(url, quote=True)
        return f'<a href="{safe_url}">{label}</a>'
    text = re.sub(r"\[([^\]]+)\]\(([^)]+)\)", _replace_link, text)

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ #‚Ä¶##
    text = re.sub(r"^(#{1,6})\s*(.+)$", lambda m: f"<b>{m.group(2)}</b>\n", text, flags=re.MULTILINE)

    # –ñ–∏—Ä–Ω—ã–π **text**
    text = re.sub(r"\*\*([^\*]+)\*\*", r"<b>\1</b>", text)
    # –ü–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ __text__
    text = re.sub(r"__([^_]+)__", r"<u>\1</u>", text)
    # –ö—É—Ä—Å–∏–≤ *text* –∏ _text_
    text = re.sub(r"(?<!\*)\*([^*]+)\*(?!\*)", r"<i>\1</i>", text)
    text = re.sub(r"(?<!_)_([^_]+)_(?!_)", r"<i>\1</i>", text)
    # –ó–∞—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ ~~text~~
    text = re.sub(r"~~(.+?)~~", r"<s>\1</s>", text)
    # –°–ø–æ–π–ª–µ—Ä—ã ||text||
    text = re.sub(r"\|\|(.+?)\|\|", r"<tg-spoiler>\1</tg-spoiler>", text)

    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤
    for placeholder, code in code_blocks.items():
        escaped = html.escape(code, quote=False)
        if placeholder.startswith("@@CODEBLOCK_"):
            replacement = f"<pre>{escaped}</pre>"
        else:
            replacement = f"<code>{escaped}</code>"
        text = text.replace(placeholder, replacement)

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ (–Ω–µ –±–æ–ª–µ–µ –¥–≤—É—Ö –ø–æ–¥—Ä—è–¥)
    text = re.sub(r'\n{3,}', '\n\n', text)
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ
    text = text.strip()

    return text

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ ---
def split_text(text: str, length: int = TELEGRAM_MAX_LENGTH) -> list[str]:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã."""
    if len(text) <= length:
        return [text]

    chunks = []
    start = 0
    while start < len(text):
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –ø—Ä–æ–±–µ–ª –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–ª–∏–Ω—ã
        end = start + length
        if end >= len(text):
            chunks.append(text[start:])
            break

        split_pos = -1
        # –ò—â–µ–º —Å –∫–æ–Ω—Ü–∞ –∫ –Ω–∞—á–∞–ª—É —á–∞–Ω–∫–∞
        for i in range(end - 1, start -1, -1):
            if text[i] == '\n':
                split_pos = i + 1 # –í–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —á–∞–Ω–∫
                break
            elif text[i] == ' ':
                split_pos = i + 1 # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø—Ä–æ–±–µ–ª—É
                break

        if split_pos != -1 and split_pos > start: # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ç–æ—á–∫—É —Ä–∞–∑—Ä—ã–≤–∞
            chunks.append(text[start:split_pos])
            start = split_pos
        else: # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)
            # –ü—Ä–æ—Å—Ç–æ —Ä—É–±–∏–º –ø–æ –¥–ª–∏–Ω–µ
            chunks.append(text[start:end])
            start = end

    return chunks


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram ---

@dp.message(Command("start"))
async def start_handler(message: types.Message):
    builder = InlineKeyboardBuilder()
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º final_keyboard –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    builder.button(text="üîÑ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="clear_history")
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.", reply_markup=builder.as_markup())

@dp.message(F.text)
async def message_handler(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    user_text = message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –∏–¥–µ—Ç –ª–∏ —É–∂–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in active_requests:
        try:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –µ–≥–æ.", reply_markup=progress_keyboard(user_id))
        except TelegramAPIError as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥—É–±–ª–∏—Ä—É—é—â–µ–º –∑–∞–ø—Ä–æ—Å–µ: {e}")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ workflow_data
    db = dp.workflow_data.get('db')
    current_settings = dp.workflow_data.get('settings') # –ò—Å–ø–æ–ª—å–∑—É–µ–º current_settings

    if not db or not current_settings:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (–∫–æ–¥ 1), –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
    await bot.send_chat_action(chat_id=chat_id, action="typing")

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await add_message_to_db(db, user_id, "user", user_text)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        history = await get_last_messages(db, user_id, limit=CONVERSATION_HISTORY_LIMIT)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –∑–∞–ø–∏—Å–µ–π: {len(history)}")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏
        full_raw_response = ""      # –ü–æ–ª–Ω—ã–π —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –¥–ª—è –ë–î –∏ —Ä–∞–∑–±–∏–µ–Ω–∏—è
        current_message_id = None   # ID —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        last_edit_time = 0          # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º time.monotonic)
        edit_interval = 1.5         # –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥–∞ (—Å–µ–∫—É–Ω–¥—ã) - –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å
        formatting_failed = False   # –§–ª–∞–≥, –µ—Å–ª–∏ HTML –ø–∞—Ä—Å–∏–Ω–≥ –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è-–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞ –∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏
        try:
            placeholder_message = await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...")
            current_message_id = placeholder_message.message_id
            last_edit_time = time.monotonic()
        except TelegramAPIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞: {e}")
            return # –ù–µ –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

        # –°—Ç–∞—Ä—ã–π —Ü–∏–∫–ª —Å—Ç—Ä–∏–º–∏–Ω–≥–∞, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥ stream_xai_response
        async for chunk in stream_xai_response(current_settings.XAI_API_KEY, SYSTEM_PROMPT, history):
            full_raw_response += chunk
            now = time.monotonic()

            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥–æ–º
            if now - last_edit_time > edit_interval and current_message_id:
                try:
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –í–ï–°–¨ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ HTML
                    html_to_send = markdown_to_telegram_html(full_raw_response)

                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è "..."
                    text_to_show = html_to_send + "..."

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                    if len(text_to_show) > TELEGRAM_MAX_LENGTH:
                        logger.warning(f"–î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è {len(text_to_show)} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç {TELEGRAM_MAX_LENGTH}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
                        continue # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

                    if not formatting_failed:
                        await bot.edit_message_text(
                            text=text_to_show,
                            chat_id=chat_id,
                            message_id=current_message_id,
                            parse_mode=ParseMode.HTML # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º HTML
                        )
                    else:
                        # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–Ω–µ–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—ã—Ä–æ–π —Ç–µ–∫—Å—Ç
                        await bot.edit_message_text(
                            text=full_raw_response + "...", # –°—ã—Ä–æ–π —Ç–µ–∫—Å—Ç
                            chat_id=chat_id,
                            message_id=current_message_id,
                            parse_mode=None # –ë–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        )
                    last_edit_time = now

                except TelegramRetryAfter as e:
                    logger.warning(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (RetryAfter), –æ–∂–∏–¥–∞–Ω–∏–µ {e.retry_after}—Å")
                    await asyncio.sleep(e.retry_after + 0.1) # –ñ–¥–µ–º —á—É—Ç—å –¥–æ–ª—å—à–µ
                    last_edit_time = time.monotonic() # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
                except TelegramAPIError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å HTML: {e}. –¢–µ–∫—Å—Ç (–Ω–∞—á–∞–ª–æ): {html_to_send[:100]}...")
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    try:
                        logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                        await bot.edit_message_text(
                            text=full_raw_response + "...", # –°—ã—Ä–æ–π —Ç–µ–∫—Å—Ç
                            chat_id=chat_id,
                            message_id=current_message_id,
                            parse_mode=None # –ë–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        )
                        last_edit_time = now
                        formatting_failed = True # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ HTML –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    except TelegramAPIError as plain_error:
                        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–∂–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {plain_error}")
                        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        if "message to edit not found" in str(plain_error).lower() or \
                           "message can't be edited" in str(plain_error).lower() or \
                           "message is not modified" in str(plain_error).lower():
                            logger.warning("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω–æ, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
                            current_message_id = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID
                            break # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
                        # –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                except Exception as e:
                     logger.exception(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                     # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å fallback –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å

        # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç—Ä–∏–º–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º/—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if current_message_id:
            try:
                final_html = markdown_to_telegram_html(full_raw_response)
                final_keyboard_markup = final_keyboard() # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

                # –†–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ (–ª–æ–≥–∏–∫–∞ –∏–∑ split_text)
                message_parts = split_text(final_html, TELEGRAM_MAX_LENGTH)

                if not message_parts: # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π
                     message_parts = split_text(full_raw_response, TELEGRAM_MAX_LENGTH) # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–±–∏—Ç—å —Å—ã—Ä–æ–π —Ç–µ–∫—Å—Ç
                     formatting_failed = True # –°—á–∏—Ç–∞–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å

                if not message_parts: # –ï—Å–ª–∏ –∏ —Å—ã—Ä–æ–π —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π
                    logger.warning("–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—É—Å—Ç –ø–æ—Å–ª–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤ —Å—ã—Ä–æ–º –≤–∏–¥–µ.")
                    # –£–¥–∞–ª—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –∏–ª–∏ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                    try:
                        await bot.delete_message(chat_id=chat_id, message_id=current_message_id)
                    except TelegramAPIError:
                        try: # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
                            await bot.edit_message_text(
                                text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç.",
                                chat_id=chat_id,
                                message_id=current_message_id
                            )
                        except TelegramAPIError:
                            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∏ —É–¥–∞–ª–∏—Ç—å, –Ω–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.")
                    current_message_id = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID
                else:
                    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä) –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç—å—é
                    try:
                        await bot.edit_message_text(
                            text=message_parts[0],
                            chat_id=chat_id,
                            message_id=current_message_id,
                            parse_mode=None if formatting_failed else ParseMode.HTML,
                            reply_markup=final_keyboard_markup if len(message_parts) == 1 else None # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–ª—å–∫–æ —É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                        )
                        logger.info(f"–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (—á–∞—Å—Ç—å 1/{len(message_parts)}) {'RAW' if formatting_failed else 'HTML'} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    except TelegramAPIError as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—á–∞—Å—Ç—å 1): {e}. –ü–æ–ø—ã—Ç–∫–∞ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                        try:
                             await bot.edit_message_text(
                                text=split_text(full_raw_response, TELEGRAM_MAX_LENGTH)[0], # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å —Å—ã—Ä–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                                chat_id=chat_id,
                                message_id=current_message_id,
                                parse_mode=None,
                                reply_markup=final_keyboard_markup if len(message_parts) == 1 else None
                            )
                             formatting_failed = True # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—á–Ω–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
                             logger.info(f"–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (—á–∞—Å—Ç—å 1/{len(message_parts)}) RAW –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ HTML")
                        except TelegramAPIError as plain_final_error:
                             logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—á–∞—Å—Ç—å 1) –¥–∞–∂–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {plain_final_error}")
                             # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
                             try:
                                 new_msg = await message.answer(
                                     text=message_parts[0],
                                     parse_mode=None if formatting_failed else ParseMode.HTML,
                                     reply_markup=final_keyboard_markup if len(message_parts) == 1 else None
                                 )
                                 current_message_id = new_msg.message_id # –û–±–Ω–æ–≤–ª—è–µ–º ID –Ω–∞ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                             except Exception as send_err:
                                 logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {send_err}")
                                 current_message_id = None # –ù–µ –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å


                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –Ω–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                    if current_message_id: # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å/–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å
                        for i in range(1, len(message_parts)):
                            try:
                                await asyncio.sleep(0.1) # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                                await message.answer(
                                    text=message_parts[i],
                                    parse_mode=None if formatting_failed else ParseMode.HTML,
                                    reply_markup=final_keyboard_markup if i == len(message_parts) - 1 else None
                                )
                                logger.info(f"–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (—á–∞—Å—Ç—å {i+1}/{len(message_parts)}) {'RAW' if formatting_failed else 'HTML'} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                            except TelegramAPIError as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–∏ {i+1} —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                                # –ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É
                                try:
                                    await message.answer(
                                        text=split_text(full_raw_response, TELEGRAM_MAX_LENGTH)[i],
                                        parse_mode=None,
                                        reply_markup=final_keyboard_markup if i == len(message_parts) - 1 else None
                                    )
                                except Exception as send_err_part:
                                     logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∞—Å—Ç—å {i+1} –¥–∞–∂–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {send_err_part}")
                                     break # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —á–∞—Å—Ç–µ–π

            except TelegramRetryAfter as e:
                logger.warning(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (RetryAfter) –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ–∂–∏–¥–∞–Ω–∏–µ {e.retry_after}—Å")
                await asyncio.sleep(e.retry_after + 0.1)
                # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            except Exception as e:
                logger.exception(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if current_message_id:
                    try:
                        await bot.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.", chat_id=chat_id, message_id=current_message_id)
                    except TelegramAPIError:
                         pass # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ü–û–õ–ù–´–ô –°–´–†–û–ô –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –ë–î
        if full_raw_response:
            try:
                await add_message_to_db(db, user_id, "assistant", full_raw_response)
                logger.info(f"–û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (RAW) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –ë–î: {e}")
        else:
             logger.warning(f"–ù–µ –ø–æ–ª—É—á–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç XAI –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
             # –ï—Å–ª–∏ –±—ã–ª–æ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
             if current_message_id:
                 try:
                      await bot.edit_message_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI.", chat_id=chat_id, message_id=current_message_id)
                 except TelegramAPIError:
                      pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å

    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è user_id={user_id}: {e}")
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
            if current_message_id:
                 await bot.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–µ—Ä—å–µ–∑–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.", chat_id=chat_id, message_id=current_message_id)
            else: # –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–µ—Ä—å–µ–∑–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Å–±—Ä–æ—Å–∞.")
        except TelegramAPIError:
             logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–∞–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ---
@dp.callback_query(F.data.startswith("cancel_generation_"))
async def cancel_generation_callback(callback: types.CallbackQuery):
    try:
        user_id_to_cancel = int(callback.data.split("_")[-1])
        requesting_user_id = callback.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω—è–µ—Ç —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        if user_id_to_cancel != requesting_user_id:
            await callback.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —á—É–∂–æ–π –∑–∞–ø—Ä–æ—Å.", show_alert=True)
            return

        task_to_cancel = active_requests.get(user_id_to_cancel)

        if task_to_cancel:
            task_to_cancel.cancel()
            logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_to_cancel} –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
            await callback.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –≤ –±–ª–æ–∫–µ finally/except CancelledError –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            # –Ω–æ –º–æ–∂–Ω–æ –∏ –∑–¥–µ—Å—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await callback.message.edit_text("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=None)
            except TelegramAPIError as e:
                 logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã: {e}")

        else:
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_to_cancel}")
            await callback.answer("–ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ç–º–µ–Ω—ã.", show_alert=True)
            # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ —É–∂–µ –Ω–µ—Ç
            try:
                await callback.message.edit_reply_markup(reply_markup=None)
            except TelegramAPIError:
                pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –∏–∑–º–µ–Ω–∏—Ç—å

    except ValueError:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ user_id –∏–∑ callback_data: {callback.data}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.", show_alert=True)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ cancel_generation_callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ.", show_alert=True)


@dp.callback_query(F.data == "clear_history")
async def clear_history_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ (–º–æ–∂–Ω–æ –∏ —á–µ—Ä–µ–∑ bot.dispatcher)
    db = dp.workflow_data.get('db')
    current_settings = dp.workflow_data.get('settings')

    if not db or not current_settings:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ë–î/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ (callback)")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏", show_alert=True)
        return

    try:
        rows_deleted_count = 0
        if current_settings.USE_SQLITE:
            def _clear_history_sqlite():
                db_path = db # db –∑–¥–µ—Å—å —ç—Ç–æ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                conn = sqlite3.connect(db_path)
                cursor = conn.cursor()
                cursor.execute("DELETE FROM conversations WHERE user_id = ?", (user_id,))
                deleted_count = cursor.rowcount
                conn.commit()
                conn.close()
                return deleted_count
            rows_deleted_count = await asyncio.to_thread(_clear_history_sqlite)
            logger.info(f"SQLite: –û—á–∏—â–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —É–¥–∞–ª–µ–Ω–æ {rows_deleted_count} –∑–∞–ø–∏—Å–µ–π")
        else:
            # PostgreSQL
            async with db.acquire() as connection: # db –∑–¥–µ—Å—å —ç—Ç–æ –ø—É–ª
                result = await connection.execute("DELETE FROM conversations WHERE user_id = $1", user_id) # –£–±—Ä–∞–ª RETURNING id –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
                # result —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "DELETE N", –ø–∞—Ä—Å–∏–º N
                try:
                    rows_deleted_count = int(result.split()[-1]) if result.startswith("DELETE") else 0
                except:
                    rows_deleted_count = -1 # –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
                logger.info(f"PostgreSQL: –û—á–∏—â–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

        await callback.answer(f"–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞ ({rows_deleted_count} –∑–∞–ø–∏—Å–µ–π —É–¥–∞–ª–µ–Ω–æ)", show_alert=False)
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–≤–µ—á–∞–µ–º –Ω–æ–≤—ã–º
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
            await callback.message.edit_text("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞.", reply_markup=None)
        except TelegramAPIError:
            # –ï—Å–ª–∏ –Ω–µ –≤—ã—à–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —ç—Ç–æ –±—ã–ª–æ –Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –∏–ª–∏ –ø—Ä–æ—à–ª–æ –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏),
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
             await callback.message.answer("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞.")

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ (callback) –¥–ª—è user_id={user_id}: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ", show_alert=True)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear ---
@dp.message(Command("clear"))
async def clear_command_handler(message: types.Message):
    user_id = message.from_user.id
    db = dp.workflow_data.get('db')
    current_settings = dp.workflow_data.get('settings')

    if not db or not current_settings:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ë–î/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ (/clear)")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (–∫–æ–¥ 2), –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    try:
        rows_deleted_count = 0
        if current_settings.USE_SQLITE:
            def _clear_history_sqlite_cmd():
                db_path = db
                conn = sqlite3.connect(db_path)
                cursor = conn.cursor()
                cursor.execute("DELETE FROM conversations WHERE user_id = ?", (user_id,))
                deleted_count = cursor.rowcount
                conn.commit()
                conn.close()
                return deleted_count
            rows_deleted_count = await asyncio.to_thread(_clear_history_sqlite_cmd)
            logger.info(f"SQLite: –û—á–∏—â–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ –∫–æ–º–∞–Ω–¥–µ /clear, —É–¥–∞–ª–µ–Ω–æ {rows_deleted_count} –∑–∞–ø–∏—Å–µ–π")
        else:
            # PostgreSQL
            async with db.acquire() as connection:
                result = await connection.execute("DELETE FROM conversations WHERE user_id = $1", user_id)
                try:
                     rows_deleted_count = int(result.split()[-1]) if result.startswith("DELETE") else 0
                except:
                    rows_deleted_count = -1
                logger.info(f"PostgreSQL: –û—á–∏—â–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ –∫–æ–º–∞–Ω–¥–µ /clear, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

        await message.answer(f"–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞ ({rows_deleted_count} –∑–∞–ø–∏—Å–µ–π —É–¥–∞–ª–µ–Ω–æ).")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ (/clear) –¥–ª—è user_id={user_id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–¥–∏–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
@dp.message(F.photo)
async def photo_handler(message: types.Message):
    user_id = message.from_user.id
    caption = message.caption or ""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç user_id={user_id} —Å –ø–æ–¥–ø–∏—Å—å—é: '{caption[:50]}...'")

    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º, —á—Ç–æ —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è LLM
    if caption:
         await message.reply("–Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –Ω–æ —è –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–µ–∫—Å—Ç –ø–æ–¥–ø–∏—Å–∏.")
         # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ message_handler
         fake_text_message = types.Message(
             message_id=message.message_id + 1, # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
             date=message.date,
             chat=message.chat,
             from_user=message.from_user,
             text=caption,
             # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≥–¥–µ-—Ç–æ
         )
         # –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞
         await message_handler(fake_text_message)
    else:
        await message.reply("–Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Ñ–æ—Ç–æ. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ –Ω–µ–º –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é.")

@dp.message(F.document)
async def document_handler(message: types.Message):
    user_id = message.from_user.id
    file_name = message.document.file_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    mime_type = message.document.mime_type or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç user_id={user_id}: {file_name} (type: {mime_type})")
    await message.reply(f"–ü–æ–ª—É—á–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç '{file_name}'. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")


# --- –§—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ---

# –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é on_shutdown
async def on_shutdown(**kwargs):
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
    # –ü–æ–ª—É—á–∞–µ–º dp –∏ –∏–∑ –Ω–µ–≥–æ workflow_data
    dp_local = kwargs.get('dispatcher') # aiogram –ø–µ—Ä–µ–¥–∞–µ—Ç dispatcher
    if not dp_local:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å dispatcher –≤ on_shutdown")
        return

    db = dp_local.workflow_data.get('db')
    settings_local = dp_local.workflow_data.get('settings')

    if db and settings_local:
        if not settings_local.USE_SQLITE:
            try:
                # db –∑–¥–µ—Å—å —ç—Ç–æ –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π asyncpg
                if isinstance(db, asyncpg.Pool):
                    await db.close()
                    logger.info("–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π PostgreSQL —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç")
                else:
                    logger.warning("–û–±—ä–µ–∫—Ç 'db' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—É–ª–æ–º asyncpg, –∑–∞–∫—Ä—ã—Ç–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π PostgreSQL: {e}")
        else:
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite, —è–≤–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—É–ª–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
    else:
         logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å 'db' –∏–ª–∏ 'settings' –∏–∑ workflow_data –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã.")

    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–Ω–æ) ---
async def set_bot_commands(bot_instance: Bot):
    commands = [
        types.BotCommand(command="/start", description="–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ / –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"),
        types.BotCommand(command="/clear", description="–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"),
        # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    ]
    try:
        await bot_instance.set_my_commands(commands)
        logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: {e}")

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ---
async def main():
    logger.info(f"–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {settings.DATABASE_URL}")
    db_connection = None # –ü–µ—Ä–µ–∏–º–µ–Ω—É–µ–º, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å –∏–º–µ–Ω–µ–º –º–æ–¥—É–ª—è

    try:
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ë–î –Ω–∞ –æ—Å–Ω–æ–≤–µ URL –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if settings.USE_SQLITE:
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            db_connection = await init_sqlite_db(settings.DATABASE_URL) # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å
        else:
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PostgreSQL –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            try:
                logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL: {settings.DATABASE_URL}")
                # –£–≤–µ–ª–∏—á–∏–º —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è create_pool
                db_connection = await asyncio.wait_for(
                    asyncpg.create_pool(dsn=settings.DATABASE_URL, timeout=30.0, command_timeout=60.0, min_size=1, max_size=10),
                    timeout=45.0 # –û–±—â–∏–π —Ç–∞–π–º–∞—É—Ç –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞
                )
                if not db_connection:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π PostgreSQL (–≤–µ—Ä–Ω—É–ª—Å—è None)")
                    sys.exit(1)

                logger.info("–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π PostgreSQL —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
                # –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
                await init_db_postgres(db_connection)

            except asyncio.TimeoutError:
                logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL")
                sys.exit(1)
            except (socket.gaierror, OSError) as e: # –û—à–∏–±–∫–∏ —Å–µ—Ç–∏/DNS
                logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ DNS –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ PostgreSQL: {e}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ö–æ—Å—Ç/–ø–æ—Ä—Ç –≤ DATABASE_URL.")
                sys.exit(1)
            except asyncpg.exceptions.InvalidPasswordError:
                 logger.error("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ PostgreSQL: –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
                 sys.exit(1)
            except asyncpg.exceptions.InvalidCatalogNameError as e: # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É InvalidCatalogNameError
                 logger.error(f"–û—à–∏–±–∫–∞ PostgreSQL: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö, —É–∫–∞–∑–∞–Ω–Ω–∞—è –≤ URL, –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. {e}")
                 sys.exit(1)
            except asyncpg.PostgresError as e:
                logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ PostgreSQL –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏/–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
                sys.exit(1)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–ø—É—Ç—å –∫ SQLite –∏–ª–∏ –ø—É–ª PG) –≤ workflow_data
        dp.workflow_data['db'] = db_connection
        dp.workflow_data['settings'] = settings
        logger.info("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ DB –∏ Settings —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ dispatcher")

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —ç—Ç–æ)
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ shutdown –ë–ï–ó –ø–µ—Ä–µ–¥–∞—á–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        dp.shutdown.register(on_shutdown)
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ shutdown –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ - –ø–æ–º–µ—â–∞–µ–º –∑–¥–µ—Å—å, –≤ –∫–æ–Ω—Ü–µ –±–ª–æ–∫–∞ try
        await set_bot_commands(bot)

    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
        sys.exit(1)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (polling)...")
    try:
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: {e}")
    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞ (–≤–∞–∂–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
        await bot.session.close()
        logger.info("–°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞.")

# –û—Ç–¥–µ–ª—å–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∑–∞–¥–∞—á
async def cleanup_tasks():
    tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
    if tasks:
        logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è {len(tasks)} —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á...")
        [task.cancel() for task in tasks]
        try:
            await asyncio.gather(*tasks, return_exceptions=True)
            logger.info("–§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")
        except asyncio.CancelledError:
             logger.info("–ó–∞–¥–∞—á–∏ –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã –≤–æ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
         logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª KeyboardInterrupt, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...")
    except SystemExit:
         logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SystemExit, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...")
    finally:
        # –í—ã–∑—ã–≤–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ—á–∏—Å—Ç–∫—É —á–µ—Ä–µ–∑ asyncio.run
        logger.info("–ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á...")
        try:
            asyncio.run(cleanup_tasks())
        except RuntimeError as e:
            # –ò–∑–±–µ–≥–∞–µ–º –æ—à–∏–±–∫–∏ "Cannot run the event loop while another loop is running"
            # –µ—Å–ª–∏ loop —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ
            if "Cannot run the event loop" in str(e):
                 logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å cleanup_tasks: —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –∑–∞–Ω—è—Ç.")
            else:
                 logger.exception("–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è cleanup_tasks.")
        except Exception as e:
            logger.exception("–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è cleanup_tasks.")

        logger.info("–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω.")