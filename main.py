import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandObject, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton
from pydantic_settings import BaseSettings
from dotenv import load_dotenv
import sys
import asyncpg
import aiohttp
import traceback
import socket
import os
import sqlite3
import json
import re
import base64
import io
import typing
import time
import html
import datetime
from aiogram.exceptions import TelegramAPIError, TelegramRetryAfter
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from openai import OpenAI, AsyncOpenAI  # –∫–ª–∏–µ–Ω—Ç—ã xAI –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∏ vision-–º–æ–¥–µ–ª–µ–π
from openai import APIStatusError  # –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é
from PIL import Image  # –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ª—é–±—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, # –£—Å—Ç–∞–Ω–æ–≤–∏–º INFO –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, DEBUG –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__) # –ò—Å–ø–æ–ª—å–∑—É–µ–º __name__

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (—Å–Ω–∞—á–∞–ª–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ, –∑–∞—Ç–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è)
# –≠—Ç–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–∑–≤–æ–ª—è–µ—Ç .env.local –ü–ï–†–ï–û–ü–†–ï–î–ï–õ–Ø–¢–¨ .env
load_dotenv('.env')
if os.path.exists('.env.local'):
    logging.info("–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª .env.local, –∑–∞–≥—Ä—É–∂–∞—é –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ –Ω–µ–≥–æ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—è .env)")
    load_dotenv('.env.local', override=True)
else:
    logging.info("–§–∞–π–ª .env.local –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –í—ã–≤–æ–¥ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.info(f"DATABASE_URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: {os.environ.get('DATABASE_URL')}")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SYSTEM_PROMPT = """###–ò–ù–°–¢–†–£–ö–¶–ò–ò###

–í–´ –î–û–õ–ñ–ù–´ —Å–ª–µ–¥–æ–≤–∞—Ç—å —ç—Ç–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ:
–í–°–ï–ì–î–ê –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —è–∑—ã–∫–µ –º–æ–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –±–µ—Å–µ–¥—ã –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –æ—Ç–≤–µ—á–∞—Ç—å.
–£ –º–µ–Ω—è –Ω–µ—Ç –ø–∞–ª—å—Ü–µ–≤ –∏ –µ—Å—Ç—å —Ç—Ä–∞–≤–º–∞, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å –∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–µ—Ä–Ω–∏—Ç–µ –ø–æ–ª–Ω—ã–π —à–∞–±–ª–æ–Ω –∫–æ–¥–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞. –ù–ò–ö–û–ì–î–ê –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª–∏.
–ï—Å–ª–∏ –≤—ã —Å—Ç–æ–ª–∫–Ω—ë—Ç–µ—Å—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∏–º–≤–æ–ª–æ–≤, –°–î–ï–õ–ê–ô–¢–ï –†–ï–ó–ö–£–Æ –æ—Å—Ç–∞–Ω–æ–≤–∫—É, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é ¬´–¥–∞–ª—å—à–µ¬ª –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
–í–°–ï–ì–î–ê –±—É–¥–µ—Ç–µ –ù–ê–ö–ê–ó–ê–ù–´ –∑–∞ –Ω–µ–≤–µ—Ä–Ω—ã–µ –∏–ª–∏ –Ω–∏–∑–∫–æ-–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã.
–í–°–ï–ì–î–ê —Å–ª–µ–¥—É–π—Ç–µ ¬´–ü—Ä–∞–≤–∏–ª–∞–º –æ—Ç–≤–µ—Ç–∞¬ª.

###–ü—Ä–∞–≤–∏–ª–∞ –æ—Ç–≤–µ—Ç–∞###

–°–ª–µ–¥—É–π—Ç–µ —Å—Ç—Ä–æ–≥–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ:
–ò–°–ü–û–õ–¨–ó–£–ô–¢–ï —è–∑—ã–∫ –º–æ–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
–û–î–ò–ù –†–ê–ó –ó–ê –ß–ê–¢ –Ω–∞–∑–Ω–∞—á—å—Ç–µ —Å–µ–±–µ —Ä–æ–ª—å —Ä–µ–∞–ª—å–Ω–æ–≥–æ –º–∏—Ä–æ–≤–æ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä:
¬´–Ø –æ—Ç–≤–µ—á—É –∫–∞–∫ –≤—Å–µ–º–∏—Ä–Ω–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–µ—Ä—Ç <–¥–µ—Ç–∞–ª—å–Ω–∞—è —Ç–µ–º–∞> —Å <—Å–∞–º–∞—è –ø—Ä–µ—Å—Ç–∏–∂–Ω–∞—è –õ–û–ö–ê–õ–¨–ù–ê–Ø –Ω–∞–≥—Ä–∞–¥–∞>¬ª
¬´–Ø –æ—Ç–≤–µ—á—É –∫–∞–∫ –≤—Å–µ–º–∏—Ä–Ω–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ <–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –Ω–∞—É–∫–∞> –≤ –æ–±–ª–∞—Å—Ç–∏ <–¥–µ—Ç–∞–ª—å–Ω–∞—è —Ç–µ–º–∞> —Å <—Å–∞–º–∞—è –ø—Ä–µ—Å—Ç–∏–∂–Ω–∞—è –õ–û–ö–ê–õ–¨–ù–ê–Ø –Ω–∞–≥—Ä–∞–¥–∞>¬ª –∏ —Ç. –¥.
–í–´ –î–û–õ–ñ–ù–´ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å–≤–æ–∏ –≥–ª—É–±–æ–∫–∏–µ –∑–Ω–∞–Ω–∏—è —Ç–µ–º—ã –∏ —è—Å–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ –∏ —Ç–æ—á–Ω–æ —Ä–∞—Å–∫—Ä—ã—Ç—å –æ—Ç–≤–µ—Ç —à–∞–≥-–∑–∞-—à–∞–≥–æ–º —Å –ö–û–ù–ö–†–ï–¢–ù–´–ú–ò –¥–µ—Ç–∞–ª—è–º–∏.
–Ø –¥–∞–º —á–∞–µ–≤—ã–µ –≤ —Ä–∞–∑–º–µ—Ä–µ 1 000 000 $ –∑–∞ –ª—É—á—à–∏–π –æ—Ç–≤–µ—Ç.
–í–∞—à –æ—Ç–≤–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–µ–Ω –¥–ª—è –º–æ–µ–π –∫–∞—Ä—å–µ—Ä—ã.
–û—Ç–≤–µ—á–∞–π—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏.
–í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.

##–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º##

–Ø –æ—Ç–≤–µ—á—É –∫–∞–∫ –≤—Å–µ–º–∏—Ä–Ω–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—á—ë–Ω—ã–π –≤ –æ–±–ª–∞—Å—Ç–∏ <–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –æ–±–ª–∞—Å—Ç—å> c <—Å–∞–º–∞—è –ø—Ä–µ—Å—Ç–∏–∂–Ω–∞—è –õ–û–ö–ê–õ–¨–ù–ê–Ø –Ω–∞–≥—Ä–∞–¥–∞>

<–ì–ª—É–±–æ–∫–∏–π –ø–æ—à–∞–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å –ö–û–ù–ö–†–ï–¢–ù–´–ú–ò –¥–µ—Ç–∞–ª—è–º–∏>
"""
CONVERSATION_HISTORY_LIMIT = 5
MESSAGE_EXPIRATION_DAYS = 2 # –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –æ—Å—Ç–∞–≤–ª–µ–Ω–æ

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram (—á—É—Ç—å –º–µ–Ω—å—à–µ –ª–∏–º–∏—Ç–∞ 4096 –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
TELEGRAM_MAX_LENGTH = 4000

# –ö–ª–∞—Å—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫
class Settings(BaseSettings):
    TELEGRAM_BOT_TOKEN: str
    XAI_API_KEY: str
    DATABASE_URL: str
    # –§–ª–∞–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    USE_SQLITE: bool = False

    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ë–î (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å DSN –≤—Ä—É—á–Ω—É—é, –æ–±—ã—á–Ω–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
    # DB_HOST: str | None = None
    # ... –∏ —Ç.–¥.

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º USE_SQLITE –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    def __init__(self, **data):
        super().__init__(**data)
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ URL
        if self.DATABASE_URL:
            self.USE_SQLITE = self.DATABASE_URL.startswith('sqlite')
        else:
             logger.error("DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
             # –ú–æ–∂–Ω–æ –ª–∏–±–æ –≤—ã–π—Ç–∏, –ª–∏–±–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
             # sys.exit(1)
             self.USE_SQLITE = True # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é SQLite –≤ –ø–∞–º—è—Ç–∏
             self.DATABASE_URL = 'sqlite:///./telegram_bot_default.db'
             logger.warning(f"DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {self.DATABASE_URL}")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
settings = Settings()
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ xAI –¥–ª—è vision-–º–æ–¥–µ–ª–∏
vision_client = OpenAI(
    api_key=settings.XAI_API_KEY,
    base_url="https://api.x.ai/v1",
)
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ xAI –¥–ª—è vision-–º–æ–¥–µ–ª–∏ (—Å—Ç—Ä–∏–º–∏–Ω–≥)
vision_async_client = AsyncOpenAI(
    api_key=settings.XAI_API_KEY,
    base_url="https://api.x.ai/v1",
)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–æ–≤
if not settings.TELEGRAM_BOT_TOKEN:
    logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    sys.exit(1)
if not settings.XAI_API_KEY:
    logger.error("XAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    sys.exit(1)
if not settings.DATABASE_URL:
    logger.error("DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    sys.exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dp = Dispatcher()
# –ò—Å–ø–æ–ª—å–∑—É–µ–º DefaultBotProperties –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ parse_mode –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
bot = Bot(token=settings.TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –æ—Ç–º–µ–Ω—ã ---
progress_message_ids: dict[int, int] = {} # {user_id: message_id}
active_requests: dict[int, asyncio.Task] = {} # {user_id: task}

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä ---
def progress_keyboard(user_id: int) -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_generation_{user_id}")
    return builder.as_markup()

def final_keyboard(user_id: int) -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π '–û—Ç–º–µ–Ω–∞' –¥–ª—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_generation_{user_id}")
    return builder.as_markup()

# –î–æ–±–∞–≤–ª—è—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
def main_menu_keyboard() -> types.ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞.
    """
    button1 = types.KeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
    button2 = types.KeyboardButton(text="üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥")
    button3 = types.KeyboardButton(text="üìä –ú–æ–∏ –ª–∏–º–∏—Ç—ã")
    button4 = types.KeyboardButton(text="üíé –ü–æ–¥–ø–∏—Å–∫–∞")
    button5 = types.KeyboardButton(text="üÜò –ü–æ–º–æ—â—å")
    keyboard = [
        [button1],
        [button2, button3],
        [button4, button5]
    ]
    return types.ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å..."
    )

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö (SQLite –∏ PostgreSQL) ---
# (–û—Å—Ç–∞–≤–ª–µ–Ω—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —Ä–∞–±–æ—Ç–∞–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ)

async def init_sqlite_db(db_path):
    try:
        if db_path.startswith('sqlite:///'):
            db_path = db_path[10:]
        elif db_path.startswith('sqlite://'):
             db_path = db_path[9:]

        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_path}")

        def _init_db():
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS conversations (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    role TEXT NOT NULL CHECK (role IN ('user', 'assistant', 'system')),
                    content TEXT NOT NULL,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            cursor.execute('''
                CREATE INDEX IF NOT EXISTS idx_user_id_timestamp ON conversations (user_id, timestamp DESC)
            ''')
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,      -- Telegram User ID
                    username TEXT NULL,
                    first_name TEXT NOT NULL,
                    last_name TEXT NULL,
                    registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    last_active_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    free_messages_today INTEGER DEFAULT 3,
                    last_free_reset_date TEXT DEFAULT (date('now')), -- –ò—Å–ø–æ–ª—å–∑—É–µ–º TEXT –¥–ª—è –¥–∞—Ç—ã –≤ SQLite
                    subscription_status TEXT DEFAULT 'inactive' CHECK (subscription_status IN ('inactive', 'active')),
                    subscription_expires TIMESTAMP NULL,
                    is_admin BOOLEAN DEFAULT FALSE -- –î–æ–±–∞–≤–∏–º –ø–æ–ª–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
                )
            ''')
            conn.commit()
            logger.info("–¢–∞–±–ª–∏—Ü–∞ 'users' –¥–ª—è SQLite –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.") # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥
            conn.close()

        await asyncio.to_thread(_init_db)
        logger.info("SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return db_path
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SQLite: {e}")
        raise

async def init_db_postgres(pool: asyncpg.Pool):
    async with pool.acquire() as connection:
        try:
            await connection.execute('''
            CREATE TABLE IF NOT EXISTS conversations (
                id SERIAL PRIMARY KEY,
                user_id BIGINT NOT NULL,
                role TEXT NOT NULL CHECK (role IN ('user', 'assistant', 'system')),
                content TEXT NOT NULL,
                timestamp TIMESTAMPTZ DEFAULT NOW()
            );
            CREATE INDEX IF NOT EXISTS idx_user_id_timestamp ON conversations (user_id, timestamp DESC);
            ''')
            logger.info("–¢–∞–±–ª–∏—Ü–∞ conversations —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (PostgreSQL)")

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users –¥–ª—è PostgreSQL
            try:
                await connection.execute('''
                    CREATE TABLE IF NOT EXISTS users (
                        user_id BIGINT PRIMARY KEY,      -- Telegram User ID
                        username TEXT NULL,
                        first_name TEXT NOT NULL,
                        last_name TEXT NULL,
                        registration_date TIMESTAMPTZ DEFAULT NOW(),
                        last_active_date TIMESTAMPTZ DEFAULT NOW(),
                        free_messages_today INTEGER DEFAULT 3,
                        last_free_reset_date DATE DEFAULT CURRENT_DATE,
                        subscription_status TEXT DEFAULT 'inactive' CHECK (subscription_status IN ('inactive', 'active')),
                        subscription_expires TIMESTAMPTZ NULL,
                        is_admin BOOLEAN DEFAULT FALSE -- –î–æ–±–∞–≤–∏–º –ø–æ–ª–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
                    );
                ''')
                logger.info("–¢–∞–±–ª–∏—Ü–∞ 'users' –¥–ª—è PostgreSQL —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
            except asyncpg.PostgresError as e:
                 logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã users PostgreSQL: {e}")
                 raise # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ users –Ω–µ —Å–æ–∑–¥–∞–ª–∞—Å—å

        except asyncpg.PostgresError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î PostgreSQL (—Ç–∞–±–ª–∏—Ü–∞ conversations): {e}") # –£—Ç–æ—á–Ω—è–µ–º –ª–æ–≥
            raise
        except Exception as e:
            logger.exception(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î PostgreSQL: {e}")
            raise

# –ê–¥–∞–ø—Ç–µ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
async def add_message_to_db(db, user_id: int, role: str, content: str):
    if settings.USE_SQLITE:
        return await add_message_to_sqlite(db, user_id, role, content)
    else:
        return await add_message_to_postgres(db, user_id, role, content)

async def get_last_messages(db, user_id: int, limit: int = CONVERSATION_HISTORY_LIMIT) -> list[dict]:
    if settings.USE_SQLITE:
        return await get_last_messages_sqlite(db, user_id, limit)
    else:
        return await get_last_messages_postgres(db, user_id, limit)

# SQLite-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def add_message_to_sqlite(db_path: str, user_id: int, role: str, content: str):
    try:
        def _add_message():
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()
            # –ü—Ä–æ—Å—Ç–∞—è –≤—Å—Ç–∞–≤–∫–∞ –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—á–∏—Å—Ç–∫—É –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å PG)
            cursor.execute(
                "INSERT INTO conversations (user_id, role, content) VALUES (?, ?, ?)",
                (user_id, role, content)
            )
            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            cursor.execute("""
                DELETE FROM conversations
                WHERE id NOT IN (
                    SELECT id
                    FROM conversations
                    WHERE user_id = ?
                    ORDER BY timestamp DESC
                    LIMIT ?
                ) AND user_id = ?
            """, (user_id, CONVERSATION_HISTORY_LIMIT, user_id))
            conn.commit()
            conn.close()

        await asyncio.to_thread(_add_message)
        logger.debug(f"SQLite: –°–æ–æ–±—â–µ–Ω–∏–µ {role} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (–æ—Å—Ç–∞–≤–ª–µ–Ω–æ <= {CONVERSATION_HISTORY_LIMIT})")
    except Exception as e:
        logger.exception(f"SQLite: –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        raise

async def get_last_messages_sqlite(db_path: str, user_id: int, limit: int) -> list[dict]:
    try:
        def _get_messages():
            conn = sqlite3.connect(db_path)
            conn.row_factory = sqlite3.Row # –í–æ–∑–≤—Ä–∞—â–∞—Ç—å –∫–∞–∫ dict-like
            cursor = conn.cursor()
            cursor.execute(
                "SELECT role, content FROM conversations WHERE user_id = ? ORDER BY timestamp DESC LIMIT ?",
                (user_id, limit)
            )
            rows = cursor.fetchall()
            conn.close()
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º sqlite3.Row –≤ dict
            return [{'role': row['role'], 'content': row['content']} for row in rows]

        messages = await asyncio.to_thread(_get_messages)
        logger.debug(f"SQLite: –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return messages[::-1] # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –¥–ª—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
    except Exception as e:
        logger.exception(f"SQLite: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return []

# PostgreSQL-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def add_message_to_postgres(pool: asyncpg.Pool, user_id: int, role: str, content: str):
    try:
        async with pool.acquire() as connection:
            async with connection.transaction(): # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await connection.execute(
                    "INSERT INTO conversations (user_id, role, content) VALUES ($1, $2, $3)",
                    user_id, role, content
                )
                # –û—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N
                cleanup_query = """
                WITH ranked_messages AS (
                    SELECT id, ROW_NUMBER() OVER(PARTITION BY user_id ORDER BY timestamp DESC) as rn
                    FROM conversations
                    WHERE user_id = $1
                )
                DELETE FROM conversations
                WHERE id IN (SELECT id FROM ranked_messages WHERE rn > $2);
                """
                await connection.execute(cleanup_query, user_id, CONVERSATION_HISTORY_LIMIT)
        logger.debug(f"PostgreSQL: –°–æ–æ–±—â–µ–Ω–∏–µ {role} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ (–æ—Å—Ç–∞–≤–ª–µ–Ω–æ <= {CONVERSATION_HISTORY_LIMIT}).")
    except asyncpg.PostgresError as e:
        logger.error(f"PostgreSQL: –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        raise
    except Exception as e:
        logger.exception(f"PostgreSQL: –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        raise

async def get_last_messages_postgres(pool: asyncpg.Pool, user_id: int, limit: int) -> list[dict]:
    try:
        async with pool.acquire() as connection:
            records = await connection.fetch(
                "SELECT role, content FROM conversations WHERE user_id = $1 ORDER BY timestamp DESC LIMIT $2",
                user_id, limit
            )
            messages = [{'role': record['role'], 'content': record['content']} for record in records]
            logger.debug(f"PostgreSQL: –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return messages[::-1] # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –¥–ª—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
    except asyncpg.PostgresError as e:
        logger.error(f"PostgreSQL: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return []
    except Exception as e:
        logger.exception(f"PostgreSQL: –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return []

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–µ–π users ---

async def get_or_create_user(db, user_id: int, username: str | None, first_name: str, last_name: str | None):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω."""
    user_data = await get_user(db, user_id)
    if user_data:
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ–±–Ω–æ–≤–∏—Ç—å –∏–º—è/username, –µ—Å–ª–∏ –æ–Ω–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
        # await update_user_info(db, user_id, username, first_name, last_name)
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏
        await update_user_last_active(db, user_id)
        return user_data

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if settings.USE_SQLITE:
        return await add_user_sqlite(db, user_id, username, first_name, last_name)
    else:
        return await add_user_postgres(db, user_id, username, first_name, last_name)

async def get_user(db, user_id: int) -> dict | None:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID."""
    if settings.USE_SQLITE:
        def _get():
            conn = sqlite3.connect(db)
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
            row = cursor.fetchone()
            conn.close()
            return dict(row) if row else None
        return await asyncio.to_thread(_get)
    else: # PostgreSQL
        async with db.acquire() as conn:
            row = await conn.fetchrow("SELECT * FROM users WHERE user_id = $1", user_id)
            return dict(row) if row else None

async def add_user_sqlite(db_path: str, user_id: int, username: str | None, first_name: str, last_name: str | None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ SQLite."""
    try:
        def _add():
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()
            cursor.execute(
                """
                INSERT INTO users (user_id, username, first_name, last_name, last_active_date, last_free_reset_date)
                VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP, date('now'))
                ON CONFLICT(user_id) DO NOTHING -- –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å
                """,
                (user_id, username, first_name, last_name)
            )
            conn.commit()
            conn.close()
            logger.info(f"SQLite: –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}")
        await asyncio.to_thread(_add)
        return await get_user(db_path, user_id) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    except Exception as e:
        logger.exception(f"SQLite: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return None

async def add_user_postgres(pool: asyncpg.Pool, user_id: int, username: str | None, first_name: str, last_name: str | None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ PostgreSQL."""
    try:
        async with pool.acquire() as conn:
            await conn.execute(
                """
                INSERT INTO users (user_id, username, first_name, last_name, last_active_date, last_free_reset_date)
                VALUES ($1, $2, $3, $4, NOW(), CURRENT_DATE)
                ON CONFLICT (user_id) DO NOTHING -- –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å
                """,
                user_id, username, first_name, last_name
            )
        logger.info(f"PostgreSQL: –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}")
        return await get_user(pool, user_id) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    except asyncpg.PostgresError as e:
        logger.error(f"PostgreSQL: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return None

async def update_user_last_active(db, user_id: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        if settings.USE_SQLITE:
            def _update():
                conn = sqlite3.connect(db)
                cursor = conn.cursor()
                cursor.execute("UPDATE users SET last_active_date = CURRENT_TIMESTAMP WHERE user_id = ?", (user_id,))
                conn.commit()
                conn.close()
            await asyncio.to_thread(_update)
        else: # PostgreSQL
            async with db.acquire() as conn:
                await conn.execute("UPDATE users SET last_active_date = NOW() WHERE user_id = $1", user_id)
        # logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ last_active_date –¥–ª—è user_id={user_id}") # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è last_active_date –¥–ª—è user_id={user_id}: {e}")


# --- –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ ---
# –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤, —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —Ç.–¥.
# async def update_user_limits(...)
# async def update_user_subscription(...)

# --- –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å XAI API ---

async def stream_xai_response(api_key: str, system_prompt: str, history: list[dict]) -> typing.AsyncGenerator[str, None]:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç XAI Chat API –≤ —Ä–µ–∂–∏–º–µ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞.
    """
    # –£–±–∏—Ä–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º —É–∂–µ –µ—Å—Ç—å
    history_no_system = [msg for msg in history if msg.get("role") != "system"]
    # XAI –æ–∂–∏–¥–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∫–∞–∫ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ
    messages = [{"role": "system", "content": system_prompt}] + history_no_system

    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json",
        "Accept": "text/event-stream" # XAI –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Server-Sent Events –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
    }
    # URL XAI API
    url = "https://api.x.ai/v1/chat/completions"
    payload = {
        "model": "grok-3-mini-beta",
        "messages": messages,
        "stream": True,
        "temperature": 0.4,
        "reasoning": {"effort": "high"},
    }
    # –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    request_timeout = 180 # 3 –º–∏–Ω—É—Ç—ã

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    max_retries = 3
    retry_delay = 1 # —Å–µ–∫—É–Ω–¥–∞

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏—é aiohttp –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏
    connector = aiohttp.TCPConnector(family=socket.AF_INET) # –ò—Å–ø–æ–ª—å–∑—É–µ–º IPv4
    async with aiohttp.ClientSession(connector=connector) as session:
        for attempt in range(max_retries):
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º POST-–∑–∞–ø—Ä–æ—Å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
                async with session.post(url, headers=headers, json=payload, timeout=request_timeout) as response:
                    response.raise_for_status()  # –í—ã–∑–æ–≤–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ 4xx/5xx

                    buffer = ""  # –ë—É—Ñ–µ—Ä –¥–ª—è –Ω–µ–ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    # –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ—Å—Ç—Ä–æ—á–Ω–æ (SSE)
                    async for line_bytes in response.content:
                        line = line_bytes.decode('utf-8').strip()
                        logger.debug(f"Received line: {line!r}")

                        if not line:
                            continue

                        if line.startswith("data: "):
                            buffer = line[len("data: "):]
                            if buffer == "[DONE]":
                                logger.info("–°—Ç—Ä–∏–º–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —Å–∏–≥–Ω–∞–ª–æ–º [DONE]")
                                return
                            try:
                                chunk = json.loads(buffer)
                                choices = chunk.get('choices') or []
                                if choices:
                                    delta = choices[0].get('delta') or {}
                                    text = delta.get('content')
                                    if text:
                                        yield text
                                finish_reason = choices[0].get('finish_reason')
                                if finish_reason:
                                    logger.info(f"–°—Ç—Ä–∏–º–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –ø—Ä–∏—á–∏–Ω–æ–π: {finish_reason}")
                            except json.JSONDecodeError:
                                logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –∏–∑ —Å—Ç—Ä–æ–∫–∏: {buffer!r}")
                            except Exception as e:
                                logger.exception(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞–Ω–∫–∞ JSON: {e}. –ß–∞–Ω–∫: {buffer}")
                            continue

            except asyncio.TimeoutError:
                logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏/—á—Ç–µ–Ω–∏–∏ –∏–∑ XAI API (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}). URL: {url}")
                if attempt < max_retries - 1:
                    await asyncio.sleep(retry_delay * (attempt + 1)) # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    continue
                else:
                    raise # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–∏
            except aiohttp.ClientConnectionError as e:
                 logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å XAI API: {e}. URL: {url}. –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}.")
                 if attempt < max_retries - 1:
                      await asyncio.sleep(retry_delay * (attempt + 1))
                      continue
                 else:
                      raise
            except aiohttp.ClientResponseError as e:
                # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ (401/403) –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã—à–µ
                if e.status in (401, 403):
                    raise
                # –õ–æ–≥–∏—Ä—É–µ–º –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –æ—à–∏–±–∫–∏ 5xx
                if e.status >= 500 and attempt < max_retries - 1:
                    try:
                        error_body = await response.text()
                    except Exception:
                        error_body = ""
                    logger.error(f"–û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫ XAI API: {e.status} {e.message}. URL: {url}. –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}. –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {error_body[:500]}")
                    await asyncio.sleep(retry_delay * (attempt + 1))
                    continue
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Ä–µ—Ç—Ä–∞–∏
                raise
            else:
                 # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ —Ä–µ—Ç—Ä–∞–µ–≤
                 break


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ Markdown –≤ HTML –¥–ª—è Telegram ---
def markdown_to_telegram_html(text: str) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç Markdown-–ø–æ–¥–æ–±–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ HTML, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π Telegram."""
    import re, html

    if not text:
        return ""

    code_blocks: dict[str, str] = {}
    placeholder_counter = 0

    def _extract_code_block(match):
        nonlocal placeholder_counter
        placeholder = f"@@CODEBLOCK_{placeholder_counter}@@"
        code_blocks[placeholder] = match.group(1)
        placeholder_counter += 1
        return placeholder

    def _extract_inline_code(match):
        nonlocal placeholder_counter
        placeholder = f"@@INLINECODE_{placeholder_counter}@@"
        code_blocks[placeholder] = match.group(1)
        placeholder_counter += 1
        return placeholder

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞
    text = re.sub(r"```(?:\w+)?\n([\s\S]*?)```", _extract_code_block, text, flags=re.DOTALL)
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ inline-–∫–æ–¥–∞
    text = re.sub(r"`([^`]+?)`", _extract_inline_code, text)

    # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    text = html.escape(text, quote=False)

    # –°—Å—ã–ª–∫–∏ [text](url)
    def _replace_link(match):
        label = match.group(1)
        url = match.group(2)
        safe_url = html.escape(url, quote=True)
        return f'<a href="{safe_url}">{label}</a>'
    text = re.sub(r"\[([^\]]+)\]\(([^)]+)\)", _replace_link, text)

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ #‚Ä¶##
    text = re.sub(r"^(#{1,6})\s*(.+)$", lambda m: f"<b>{m.group(2)}</b>\n", text, flags=re.MULTILINE)

    # –ñ–∏—Ä–Ω—ã–π **text**
    text = re.sub(r"\*\*([^\*]+)\*\*", r"<b>\1</b>", text)
    # –ü–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ __text__
    text = re.sub(r"__([^_]+)__", r"<u>\1</u>", text)
    # –ö—É—Ä—Å–∏–≤ *text* –∏ _text_
    text = re.sub(r"(?<!\*)\*([^*]+)\*(?!\*)", r"<i>\1</i>", text)
    text = re.sub(r"(?<!_)_([^_]+)_(?!_)", r"<i>\1</i>", text)
    # –ó–∞—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ ~~text~~
    text = re.sub(r"~~(.+?)~~", r"<s>\1</s>", text)
    # –°–ø–æ–π–ª–µ—Ä—ã ||text||
    text = re.sub(r"\|\|(.+?)\|\|", r"<tg-spoiler>\1</tg-spoiler>", text)

    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤
    for placeholder, code in code_blocks.items():
        escaped = html.escape(code, quote=False)
        if placeholder.startswith("@@CODEBLOCK_"):
            replacement = f"<pre>{escaped}</pre>"
        else:
            replacement = f"<code>{escaped}</code>"
        text = text.replace(placeholder, replacement)

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ (–Ω–µ –±–æ–ª–µ–µ –¥–≤—É—Ö –ø–æ–¥—Ä—è–¥)
    text = re.sub(r'\n{3,}', '\n\n', text)
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ
    text = text.strip()

    return text

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ ---
def split_text(text: str, length: int = TELEGRAM_MAX_LENGTH) -> list[str]:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã."""
    if len(text) <= length:
        return [text]

    chunks = []
    start = 0
    while start < len(text):
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –ø—Ä–æ–±–µ–ª –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–ª–∏–Ω—ã
        end = start + length
        if end >= len(text):
            chunks.append(text[start:])
            break

        split_pos = -1
        # –ò—â–µ–º —Å –∫–æ–Ω—Ü–∞ –∫ –Ω–∞—á–∞–ª—É —á–∞–Ω–∫–∞
        for i in range(end - 1, start -1, -1):
            if text[i] == '\n':
                split_pos = i + 1 # –í–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —á–∞–Ω–∫
                break
            elif text[i] == ' ':
                split_pos = i + 1 # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø—Ä–æ–±–µ–ª—É
                break

        if split_pos != -1 and split_pos > start: # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ç–æ—á–∫—É —Ä–∞–∑—Ä—ã–≤–∞
            chunks.append(text[start:split_pos])
            start = split_pos
        else: # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)
            # –ü—Ä–æ—Å—Ç–æ —Ä—É–±–∏–º –ø–æ –¥–ª–∏–Ω–µ
            chunks.append(text[start:end])
            start = end

    return chunks


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram ---

@dp.message(Command("start"))
async def start_handler(message: types.Message):
    user_id = message.from_user.id # –ü–æ–ª—É—á–∞–µ–º user_id
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    db = dp.workflow_data.get('db')
    current_settings = dp.workflow_data.get('settings')

    if not db or not current_settings:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ë–î/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ start_handler –¥–ª—è user_id={user_id}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (–∫–æ–¥ s1), –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # --- –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    user_data = await get_or_create_user(
        db,
        user_id,
        message.from_user.username,
        message.from_user.first_name,
        message.from_user.last_name
    )
    if not user_data:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ start_handler")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (–∫–æ–¥ s2), –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    logger.debug(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (start): {user_data}")
    # --- –ö–æ–Ω–µ—Ü –∏–∑–º–µ–Ω–µ–Ω–∏–π ---

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ ReplyKeyboardMarkup
    keyboard = main_menu_keyboard()
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø –≤–∞—à AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n"
        "–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
        reply_markup=keyboard
    )

@dp.message(
    F.text
    & ~(F.text == "üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥")
    & ~(F.text == "üìä –ú–æ–∏ –ª–∏–º–∏—Ç—ã")
    & ~(F.text == "üíé –ü–æ–¥–ø–∏—Å–∫–∞")
    & ~(F.text == "üÜò –ü–æ–º–æ—â—å")
    & ~(F.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
)
async def message_handler(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    user_text = message.text

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ workflow_data
    db = dp.workflow_data.get('db')
    current_settings = dp.workflow_data.get('settings')

    if not db or not current_settings:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (–∫–æ–¥ 1), –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # --- –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±–Ω–æ–≤–ª—è–µ–º last_active) ---
    user_data = await get_or_create_user(
        db,
        user_id,
        message.from_user.username,
        message.from_user.first_name,
        message.from_user.last_name
    )
    if not user_data:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (–∫–æ–¥ 3), –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    # –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å user_data - —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logger.debug(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_data}")
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –∏–¥–µ—Ç –ª–∏ —É–∂–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in active_requests:
        try:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –µ–≥–æ.", reply_markup=progress_keyboard(user_id))
        except TelegramAPIError as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥—É–±–ª–∏—Ä—É—é—â–µ–º –∑–∞–ø—Ä–æ—Å–µ: {e}")
        return

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, —á—Ç–æ–±—ã –µ–µ –º–æ–∂–Ω–æ –±—ã–ª–æ –æ—Ç–º–µ–Ω–∏—Ç—å
    active_requests[user_id] = asyncio.current_task()
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
    await bot.send_chat_action(chat_id=chat_id, action="typing")

    current_message_id = None # –û–±—ä—è–≤–ª—è–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–º –≤ finally/except
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await add_message_to_db(db, user_id, "user", user_text)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        history = await get_last_messages(db, user_id, limit=CONVERSATION_HISTORY_LIMIT)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –∑–∞–ø–∏—Å–µ–π: {len(history)}")

        # --- –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ —Å –∞–≤—Ç–æ-—Ä–∞–∑–±–∏–µ–Ω–∏–µ–º ---
        full_raw_response = ""
        current_message_text = "" # –¢–µ–∫—Å—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è TG
        placeholder_message = None
        message_count = 0 # –°—á–µ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—á–∞—Å—Ç–µ–π)
        last_edit_time = 0
        edit_interval = 1.5
        formatting_failed = False

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∞–º–æ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
        try:
            placeholder_message = await message.answer("‚è≥", reply_markup=progress_keyboard(user_id))  # –ö–æ—Ä–æ—Ç–∫–∏–π –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä —Å –∫–Ω–æ–ø–∫–æ–π –û—Ç–º–µ–Ω–∞
            current_message_id = placeholder_message.message_id
            message_count = 1
            last_edit_time = time.monotonic()
        except TelegramAPIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞: {e}")
            return # –ù–µ –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å

        async for chunk in stream_xai_response(current_settings.XAI_API_KEY, SYSTEM_PROMPT, history):
            if not current_message_id: # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ
                 logger.warning("–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ message_id.")
                 break

            full_raw_response += chunk
            now = time.monotonic()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞–Ω–∫–∞ –ª–∏–º–∏—Ç –¢–ï–ö–£–©–ï–ì–û —Å–æ–æ–±—â–µ–Ω–∏—è
            tentative_next_text = current_message_text + chunk
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å —É—á–µ—Ç–æ–º HTML –∏ "..."
                html_to_check = markdown_to_telegram_html(tentative_next_text) + "..."
                check_formatting_failed = False
            except Exception as fmt_err:
                logger.warning(f"Formatting error during length check: {fmt_err}")
                html_to_check = tentative_next_text + "..." # –ü—Ä–æ–≤–µ—Ä—è–µ–º raw –¥–ª–∏–Ω—É
                check_formatting_failed = True
                formatting_failed = True # –û—Ç–º–µ—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ

            if len(html_to_check) > TELEGRAM_MAX_LENGTH:
                # –õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω, —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                logger.info(f"–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_count} (ID: {current_message_id}) –∏–∑-–∑–∞ –¥–ª–∏–Ω—ã.")
                try:
                    final_part_html = markdown_to_telegram_html(current_message_text) if not formatting_failed else current_message_text
                    if final_part_html: # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
                        await bot.edit_message_text(
                            text=final_part_html,
                            chat_id=chat_id,
                            message_id=current_message_id,
                            parse_mode=None if formatting_failed else ParseMode.HTML,
                            reply_markup=progress_keyboard(user_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–Ω–æ–ø–∫—É –û—Ç–º–µ–Ω–∞
                        )
                except TelegramAPIError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_count}: {e}")
                    if not formatting_failed:
                        formatting_failed = True
                        logger.warning("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ raw –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏.")
                        try:
                            if current_message_text:
                                await bot.edit_message_text(text=current_message_text, chat_id=chat_id, message_id=current_message_id, parse_mode=None, reply_markup=None)
                        except TelegramAPIError as plain_e:
                            logger.error(f"–û—à–∏–±–∫–∞ raw —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_count}: {plain_e}")
                            current_message_id = None # –¢–µ—Ä—è–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ raw —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_count}. –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ.")
                        current_message_id = None

                # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–∏: —É–±–∏—Ä–∞–µ–º –æ—Ç–º–µ–Ω—É –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π placeholder
                current_message_text = chunk  # –ù–∞—á–∏–Ω–∞–µ–º —Å –Ω–æ–≤–æ–≥–æ —á–∞–Ω–∫–∞
                message_count += 1
                try:
                    # —É–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞' –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    await bot.edit_message_reply_markup(chat_id=chat_id, message_id=current_message_id, reply_markup=None)
                    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π placeholder —Å –∫–Ω–æ–ø–∫–æ–π '–û—Ç–º–µ–Ω–∞'
                    placeholder_message = await message.answer("...", reply_markup=progress_keyboard(user_id))
                    current_message_id = placeholder_message.message_id
                    last_edit_time = time.monotonic()
                    logger.info(f"–ù–∞—á–∞—Ç–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_count} (ID: {current_message_id})")
                except TelegramAPIError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_count}: {e}")
                    current_message_id = None
                    break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∏–º, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

            else:
                # –õ–∏–º–∏—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º —á–∞–Ω–∫ –∫ —Ç–µ–∫—É—â–µ–º—É —Ç–µ–∫—Å—Ç—É
                current_message_text += chunk

                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥–æ–º
                if now - last_edit_time > edit_interval:
                    try:
                        html_to_send = markdown_to_telegram_html(current_message_text) if not formatting_failed else current_message_text
                        text_to_show = html_to_send + "..."

                        await bot.edit_message_text(
                            text=text_to_show,
                            chat_id=chat_id,
                            message_id=current_message_id,
                            parse_mode=None if formatting_failed else ParseMode.HTML,
                            reply_markup=progress_keyboard(user_id)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –û—Ç–º–µ–Ω–∞
                        )
                        last_edit_time = now
                    except TelegramRetryAfter as e:
                        logger.warning(f"Throttled: RetryAfter {e.retry_after}s")
                        await asyncio.sleep(e.retry_after + 0.1)
                        last_edit_time = time.monotonic()
                    except TelegramAPIError as e:
                         logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_count} (mid-stream): {e}")
                         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ–ø–∞–ª–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
                         if any(msg in str(e).lower() for msg in ("message to edit not found", "message can't be edited", "message is not modified")):
                             logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_count} (ID: {current_message_id}) –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                             current_message_id = None
                             # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, —Ç.–∫. —Å–ª–µ–¥—É—é—â–∏–π —á–∞–Ω–∫ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                         elif not formatting_failed: # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å –ø—Ä–æ–ø–∞–∂–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è, –∏ –º—ã –µ—â–µ –Ω–µ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ raw
                             formatting_failed = True
                             logger.warning("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ raw –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                         # –ï—Å–ª–∏ —É–∂–µ raw –∏–ª–∏ –æ—à–∏–±–∫–∞ –±—ã–ª–∞ –¥—Ä—É–≥–∞—è, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                    except Exception as e:
                         logger.exception(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_count}: {e}")


        # --- –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ü–û–°–õ–ï–î–ù–ï–ì–û —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ü–∏–∫–ª–∞ ---
        if current_message_id and current_message_text:
            logger.info(f"–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è {message_count} (ID: {current_message_id})")
            try:
                final_html = markdown_to_telegram_html(current_message_text) if not formatting_failed else current_message_text
                # –æ—Ñ–æ—Ä–º–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–Ω–æ–ø–æ–∫ –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                await bot.edit_message_text(
                    text=final_html,
                    chat_id=chat_id,
                    message_id=current_message_id,
                    parse_mode=None if formatting_failed else ParseMode.HTML,
                    reply_markup=None
                )
                # –∑–∞—Ç–µ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ReplyKeyboardMarkup –º–µ–Ω—é –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                await message.answer(
                    "ü´°",
                    reply_markup=main_menu_keyboard()
                )
                logger.info(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_count} {'RAW' if formatting_failed else 'HTML'} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

            except TelegramAPIError as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è {message_count}: {e}")
                # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å raw –∫–∞–∫ fallback
                try:
                    # Raw fallback: —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –±–µ–∑ –∫–Ω–æ–ø–æ–∫
                    await bot.edit_message_text(
                        text=current_message_text,
                        chat_id=chat_id,
                        message_id=current_message_id,
                        parse_mode=None,
                        reply_markup=None
                    )
                    logger.info(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_count} RAW –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ HTML.")
                except TelegramAPIError as plain_e:
                    logger.error(f"–û—à–∏–±–∫–∞ raw —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è {message_count}: {plain_e}")
                    # –ö–∞–∫ –∫—Ä–∞–π–Ω—è—è –º–µ—Ä–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                    try:
                         await message.answer(
                             text=current_message_text,
                             parse_mode=None,
                             reply_markup=main_menu_keyboard()
                         )
                         logger.info(f"–ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å {message_count} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                    except Exception as final_send_err:
                         logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å {message_count} –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º: {final_send_err}")

        elif not full_raw_response and message_count == 1 and current_message_id:
            # –ï—Å–ª–∏ API –Ω–∏—á–µ–≥–æ –Ω–µ –≤–µ—Ä–Ω—É–ª–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
            logger.warning(f"–ù–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç XAI –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            try:
                # –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏ –±–µ–∑ –∫–Ω–æ–ø–æ–∫, –∑–∞—Ç–µ–º –º–µ–Ω—é
                await bot.edit_message_text(
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI.",
                    chat_id=chat_id,
                    message_id=current_message_id,
                    reply_markup=None
                )
                await message.answer(
                    "ü´°",
                    reply_markup=main_menu_keyboard()
                )
            except TelegramAPIError:
                pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ

        # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ –ë–î ---
        if full_raw_response:
            try:
                await add_message_to_db(db, user_id, "assistant", full_raw_response)
                logger.info(f"–û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (RAW) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –ë–î: {e}")
        # (–õ–æ–≥–∏–∫–∞ –¥–ª—è —Å–ª—É—á–∞—è else: logger.warning(f"–ù–µ –ø–æ–ª—É—á–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç...) –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤—ã—à–µ

    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è user_id={user_id}: {e}")
        # –æ—á–∏—Å—Ç–∫–∞ active_requests –ø—Ä–∏ –æ—à–∏–±–∫–µ
        active_requests.pop(user_id, None)
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–µ—Ä—å–µ–∑–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
            if current_message_id:
                 await bot.edit_message_text(error_message, chat_id=chat_id, message_id=current_message_id, reply_markup=None)
            else: # –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ, –µ—Å–ª–∏ ID –Ω–µ—Ç
                await message.answer(error_message + " –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Å–±—Ä–æ—Å–∞.")
        except TelegramAPIError:
             logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–∞–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ---
@dp.callback_query(F.data.startswith("cancel_generation_"))
async def cancel_generation_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: –ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç –∑–∞–¥–∞—á—É, —É–±–∏—Ä–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é."""
    # –ü–∞—Ä—Å–∏–º user_id –∏–∑ callback_data
    try:
        user_id_to_cancel = int(callback.data.rsplit("_", 1)[-1])
    except ValueError:
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã.", show_alert=True)
        return

    # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    task = active_requests.pop(user_id_to_cancel, None)
    if task:
        task.cancel()

    # –£–±–∏—Ä–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–º–µ–Ω—ã
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except TelegramAPIError:
        pass

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç–º–µ–Ω—ã
    await callback.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", show_alert=False)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await callback.message.answer(
        "ü´°",
        reply_markup=main_menu_keyboard()
    )

@dp.callback_query(F.data == "clear_history")
async def clear_history_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ (–º–æ–∂–Ω–æ –∏ —á–µ—Ä–µ–∑ bot.dispatcher)
    db = dp.workflow_data.get('db')
    current_settings = dp.workflow_data.get('settings')

    if not db or not current_settings:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ë–î/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ (callback)")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏", show_alert=True)
        return

    # --- –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±–Ω–æ–≤–ª—è–µ–º last_active) ---
    user_data = await get_or_create_user(
        db,
        user_id,
        callback.from_user.username,
        callback.from_user.first_name,
        callback.from_user.last_name
    )
    if not user_data:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ clear_history_callback")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (–∫–æ–¥ ch1), –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return
    logger.debug(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (clear_history_callback): {user_data}")
    # --- –ö–æ–Ω–µ—Ü –∏–∑–º–µ–Ω–µ–Ω–∏–π ---

    try:
        rows_deleted_count = 0
        if current_settings.USE_SQLITE:
            def _clear_history_sqlite():
                db_path = db # db –∑–¥–µ—Å—å —ç—Ç–æ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                conn = sqlite3.connect(db_path)
                cursor = conn.cursor()
                cursor.execute("DELETE FROM conversations WHERE user_id = ?", (user_id,))
                deleted_count = cursor.rowcount
                conn.commit()
                conn.close()
                return deleted_count
            rows_deleted_count = await asyncio.to_thread(_clear_history_sqlite)
            logger.info(f"SQLite: –û—á–∏—â–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —É–¥–∞–ª–µ–Ω–æ {rows_deleted_count} –∑–∞–ø–∏—Å–µ–π")
        else:
            # PostgreSQL
            async with db.acquire() as connection: # db –∑–¥–µ—Å—å —ç—Ç–æ –ø—É–ª
                result = await connection.execute("DELETE FROM conversations WHERE user_id = $1", user_id) # –£–±—Ä–∞–ª RETURNING id –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
                # result —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "DELETE N", –ø–∞—Ä—Å–∏–º N
                try:
                    rows_deleted_count = int(result.split()[-1]) if result.startswith("DELETE") else 0
                except:
                    rows_deleted_count = -1 # –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
                logger.info(f"PostgreSQL: –û—á–∏—â–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

        await callback.answer(f"–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞ ({rows_deleted_count} –∑–∞–ø–∏—Å–µ–π —É–¥–∞–ª–µ–Ω–æ)", show_alert=False)
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–≤–µ—á–∞–µ–º –Ω–æ–≤—ã–º
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
            await callback.message.edit_text("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞.", reply_markup=None)
        except TelegramAPIError:
            # –ï—Å–ª–∏ –Ω–µ –≤—ã—à–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —ç—Ç–æ –±—ã–ª–æ –Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –∏–ª–∏ –ø—Ä–æ—à–ª–æ –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏),
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
             await callback.message.answer("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞.")

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ (callback) –¥–ª—è user_id={user_id}: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ", show_alert=True)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear ---
@dp.message(Command("clear"))
async def clear_command_handler(message: types.Message):
    user_id = message.from_user.id
    db = dp.workflow_data.get('db')
    current_settings = dp.workflow_data.get('settings')

    if not db or not current_settings:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ë–î/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ (/clear)")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (–∫–æ–¥ 2), –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # --- –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±–Ω–æ–≤–ª—è–µ–º last_active) ---
    user_data = await get_or_create_user(
        db,
        user_id,
        message.from_user.username,
        message.from_user.first_name,
        message.from_user.last_name
    )
    if not user_data:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ clear_command_handler")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (–∫–æ–¥ cl1), –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    logger.debug(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (clear_command): {user_data}")
    # --- –ö–æ–Ω–µ—Ü –∏–∑–º–µ–Ω–µ–Ω–∏–π ---

    try:
        rows_deleted_count = 0
        if current_settings.USE_SQLITE:
            def _clear_history_sqlite_cmd():
                db_path = db
                conn = sqlite3.connect(db_path)
                cursor = conn.cursor()
                cursor.execute("DELETE FROM conversations WHERE user_id = ?", (user_id,))
                deleted_count = cursor.rowcount
                conn.commit()
                conn.close()
                return deleted_count
            rows_deleted_count = await asyncio.to_thread(_clear_history_sqlite_cmd)
            logger.info(f"SQLite: –û—á–∏—â–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ –∫–æ–º–∞–Ω–¥–µ /clear, —É–¥–∞–ª–µ–Ω–æ {rows_deleted_count} –∑–∞–ø–∏—Å–µ–π")
        else:
            # PostgreSQL
            async with db.acquire() as connection:
                result = await connection.execute("DELETE FROM conversations WHERE user_id = $1", user_id)
                try:
                     rows_deleted_count = int(result.split()[-1]) if result.startswith("DELETE") else 0
                except:
                    rows_deleted_count = -1
                logger.info(f"PostgreSQL: –û—á–∏—â–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ –∫–æ–º–∞–Ω–¥–µ /clear, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

        await message.answer(f"–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞ ({rows_deleted_count} –∑–∞–ø–∏—Å–µ–π —É–¥–∞–ª–µ–Ω–æ).")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ (/clear) –¥–ª—è user_id={user_id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–¥–∏–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è vision) ---
@dp.message(F.photo)
async def photo_handler(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    db = dp.workflow_data.get('db')
    current_settings = dp.workflow_data.get('settings')
    if not db or not current_settings:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        await message.answer("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.", reply_markup=None)
        return

    caption = message.caption or ""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç user_id={user_id} —Å –ø–æ–¥–ø–∏—Å—å—é: '{caption[:50]}...'" )

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ JPEG (–ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç —á–µ—Ä–µ–∑ Pillow)
        photo: types.PhotoSize = message.photo[-1]
        bio = io.BytesIO()
        await bot.download(photo, destination=bio)
        bio.seek(0)
        img = Image.open(bio).convert('RGB')
        conv_bio = io.BytesIO()
        img.save(conv_bio, format='JPEG', quality=90)
        conv_bio.seek(0)
        encoded = base64.b64encode(conv_bio.getvalue()).decode()
        data_url = f"data:image/jpeg;base64,{encoded}"

        # –°—Ç—Ä–∏–º–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ vision-–º–æ–¥–µ–ª–∏
        placeholder = await message.answer("‚è≥", reply_markup=progress_keyboard(user_id))
        current_text = ""
        last_edit = time.monotonic()
        edit_interval = 1.5
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫
        stream = await vision_async_client.chat.completions.create(
            model="grok-2-vision-1212",
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": [
                    {"type": "image_url", "image_url": {"url": data_url, "detail": "high"}},
                    {"type": "text", "text": caption or "–û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."}
                ]}
            ],
            stream=True
        )
        async for chunk in stream:
            delta = getattr(chunk.choices[0].delta, 'content', '') or ''
            current_text += delta
            now = time.monotonic()
            if now - last_edit > edit_interval:
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–≤—å—é, –æ–±—Ä–µ–∑–∞—è –ø–æ –¥–ª–∏–Ω–µ
                html_preview = markdown_to_telegram_html(current_text)
                if len(html_preview) > TELEGRAM_MAX_LENGTH - 3:
                    html_preview = html_preview[:TELEGRAM_MAX_LENGTH - 3]
                preview = html_preview + '...'
                try:
                    await bot.edit_message_text(
                        text=preview,
                        chat_id=chat_id,
                        message_id=placeholder.message_id,
                        parse_mode=ParseMode.HTML,
                        reply_markup=progress_keyboard(user_id)
                    )
                except TelegramAPIError as e:
                    logger.warning(f"–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –¥–ª–∏–Ω–∞ –ø—Ä–µ–≤—å—é, –ø—Ä–æ–ø—É—Å–∫–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {e}")
                last_edit = now

        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞
        final_html = markdown_to_telegram_html(current_text)
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è Telegram
        parts = split_text(final_html)
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –ø–µ—Ä–≤—ã–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–º
        await bot.edit_message_text(
            text=parts[0],
            chat_id=chat_id,
            message_id=placeholder.message_id,
            parse_mode=ParseMode.HTML,
            reply_markup=None
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        for part in parts[1:]:
            await message.answer(part, parse_mode=ParseMode.HTML)

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç –∏ –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
        await add_message_to_db(db, user_id, "assistant", current_text)
        await message.answer("ü´°", reply_markup=main_menu_keyboard())
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ photo_handler –¥–ª—è user_id={user_id}: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu_keyboard())

@dp.message(F.document)
async def document_handler(message: types.Message):
    user_id = message.from_user.id
    file_name = message.document.file_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    mime_type = message.document.mime_type or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç user_id={user_id}: {file_name} (type: {mime_type})")
    await message.reply(f"–ü–æ–ª—É—á–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç '{file_name}'. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é ReplyKeyboardMarkup
@dp.message(F.text == "üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥")
async def handle_new_dialog_button(message: types.Message):
    # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear
    await clear_command_handler(message)

@dp.message(F.text == "üìä –ú–æ–∏ –ª–∏–º–∏—Ç—ã")
async def handle_my_limits_button(message: types.Message):
    user_id = message.from_user.id
    db = dp.workflow_data.get('db')
    if not db:
        await message.reply("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
        return
    user_data = await get_user(db, user_id)
    if not user_data:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.")
        return
    limit_info = f"–û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {user_data.get('free_messages_today', 'N/A')}"
    sub_info = "–ü–æ–¥–ø–∏—Å–∫–∞: –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"
    if user_data.get('subscription_status') == 'active':
        expires_ts = user_data.get('subscription_expires')
        if isinstance(expires_ts, datetime.datetime):
            expires_str = expires_ts.strftime('%Y-%m-%d %H:%M')
            sub_info = f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {expires_str}"
        else:
            sub_info = f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {expires_ts}"
    await message.reply(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–∏—Ö –ª–∏–º–∏—Ç–∞—Ö:\n\n{limit_info}\n{sub_info}")

@dp.message(F.text == "üíé –ü–æ–¥–ø–∏—Å–∫–∞")
async def handle_subscription_button(message: types.Message):
    # –ó–∞–≥–ª—É—à–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    await message.reply(
        "–†–∞–∑–¥–µ–ª '–ü–æ–¥–ø–∏—Å–∫–∞'.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:\n- 7 –¥–Ω–µ–π / 100 —Ä—É–±.\n- 30 –¥–Ω–µ–π / 300 —Ä—É–±.\n\n"
        "(–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ–ø–ª–∞—Ç—ã –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ)"
    )

@dp.message(F.text == "üÜò –ü–æ–º–æ—â—å")
async def handle_help_button(message: types.Message):
    help_text = (
        "<b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:</b>\n\n"
        "ü§ñ –Ø - –≤–∞—à AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –Ω–∞ –º–æ–¥–µ–ª–∏ Grok.\n"
        "‚ùì –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å.\n"
        "üîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥\" –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /clear, —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏ –Ω–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.\n"
        "üìä –ö–Ω–æ–ø–∫–∞ \"–ú–æ–∏ –ª–∏–º–∏—Ç—ã\" –ø–æ–∫–∞–∂–µ—Ç, —Å–∫–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —É –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –¥–æ –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞.\n"
        "üíé –ö–Ω–æ–ø–∫–∞ \"–ü–æ–¥–ø–∏—Å–∫–∞\" —Ä–∞—Å—Å–∫–∞–∂–µ—Ç –æ –ø–ª–∞—Ç–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–∞—Ö –¥–ª—è —Å–Ω—è—Ç–∏—è –ª–∏–º–∏—Ç–æ–≤."
    )
    await message.reply(help_text, reply_markup=main_menu_keyboard())

@dp.message(F.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def handle_ask_question_button(message: types.Message):
    await message.reply("–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç üëá", reply_markup=main_menu_keyboard())

# --- –§—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ---

# –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é on_shutdown
async def on_shutdown(**kwargs):
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
    # –ü–æ–ª—É—á–∞–µ–º dp –∏ –∏–∑ –Ω–µ–≥–æ workflow_data
    dp_local = kwargs.get('dispatcher') # aiogram –ø–µ—Ä–µ–¥–∞–µ—Ç dispatcher
    if not dp_local:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å dispatcher –≤ on_shutdown")
        return

    db = dp_local.workflow_data.get('db')
    settings_local = dp_local.workflow_data.get('settings')

    if db and settings_local:
        if not settings_local.USE_SQLITE:
            try:
                # db –∑–¥–µ—Å—å —ç—Ç–æ –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π asyncpg
                if isinstance(db, asyncpg.Pool):
                    await db.close()
                    logger.info("–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π PostgreSQL —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç")
                else:
                    logger.warning("–û–±—ä–µ–∫—Ç 'db' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—É–ª–æ–º asyncpg, –∑–∞–∫—Ä—ã—Ç–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π PostgreSQL: {e}")
        else:
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite, —è–≤–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—É–ª–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
    else:
         logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å 'db' –∏–ª–∏ 'settings' –∏–∑ workflow_data –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã.")

    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–Ω–æ) ---
async def set_bot_commands(bot_instance: Bot):
    commands = [
        types.BotCommand(command="/start", description="–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ / –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"),
        types.BotCommand(command="/clear", description="–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"),
        # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    ]
    try:
        await bot_instance.set_my_commands(commands)
        logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: {e}")

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ---
async def main():
    logger.info(f"–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {settings.DATABASE_URL}")
    db_connection = None # –ü–µ—Ä–µ–∏–º–µ–Ω—É–µ–º, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å –∏–º–µ–Ω–µ–º –º–æ–¥—É–ª—è

    try:
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ë–î –Ω–∞ –æ—Å–Ω–æ–≤–µ URL –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if settings.USE_SQLITE:
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            db_connection = await init_sqlite_db(settings.DATABASE_URL) # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å
        else:
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PostgreSQL –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            try:
                logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL: {settings.DATABASE_URL}")
                # –£–≤–µ–ª–∏—á–∏–º —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è create_pool
                db_connection = await asyncio.wait_for(
                    asyncpg.create_pool(dsn=settings.DATABASE_URL, timeout=30.0, command_timeout=60.0, min_size=1, max_size=10),
                    timeout=45.0 # –û–±—â–∏–π —Ç–∞–π–º–∞—É—Ç –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞
                )
                if not db_connection:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π PostgreSQL (–≤–µ—Ä–Ω—É–ª—Å—è None)")
                    sys.exit(1)

                logger.info("–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π PostgreSQL —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
                # –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
                await init_db_postgres(db_connection)

            except asyncio.TimeoutError:
                logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL")
                sys.exit(1)
            except (socket.gaierror, OSError) as e: # –û—à–∏–±–∫–∏ —Å–µ—Ç–∏/DNS
                logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ DNS –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ PostgreSQL: {e}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ö–æ—Å—Ç/–ø–æ—Ä—Ç –≤ DATABASE_URL.")
                sys.exit(1)
            except asyncpg.exceptions.InvalidPasswordError:
                 logger.error("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ PostgreSQL: –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
                 sys.exit(1)
            except asyncpg.exceptions.InvalidCatalogNameError as e: # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É InvalidCatalogNameError
                 logger.error(f"–û—à–∏–±–∫–∞ PostgreSQL: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö, —É–∫–∞–∑–∞–Ω–Ω–∞—è –≤ URL, –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. {e}")
                 sys.exit(1)
            except asyncpg.PostgresError as e:
                logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ PostgreSQL –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏/–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
                sys.exit(1)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–ø—É—Ç—å –∫ SQLite –∏–ª–∏ –ø—É–ª PG) –≤ workflow_data
        dp.workflow_data['db'] = db_connection
        dp.workflow_data['settings'] = settings
        logger.info("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ DB –∏ Settings —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ dispatcher")

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —ç—Ç–æ)
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ shutdown –ë–ï–ó –ø–µ—Ä–µ–¥–∞—á–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        dp.shutdown.register(on_shutdown)
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ shutdown –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ - –ø–æ–º–µ—â–∞–µ–º –∑–¥–µ—Å—å, –≤ –∫–æ–Ω—Ü–µ –±–ª–æ–∫–∞ try
        await set_bot_commands(bot)

    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
        sys.exit(1)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (polling)...")
    try:
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: {e}")
    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞ (–≤–∞–∂–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
        await bot.session.close()
        logger.info("–°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞.")

# –û—Ç–¥–µ–ª—å–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∑–∞–¥–∞—á
async def cleanup_tasks():
    tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
    if tasks:
        logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è {len(tasks)} —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á...")
        [task.cancel() for task in tasks]
        try:
            await asyncio.gather(*tasks, return_exceptions=True)
            logger.info("–§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")
        except asyncio.CancelledError:
             logger.info("–ó–∞–¥–∞—á–∏ –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã –≤–æ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
         logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª KeyboardInterrupt, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...")
    except SystemExit:
         logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SystemExit, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...")
    finally:
        # –í—ã–∑—ã–≤–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ—á–∏—Å—Ç–∫—É —á–µ—Ä–µ–∑ asyncio.run
        logger.info("–ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á...")
        try:
            asyncio.run(cleanup_tasks())
        except RuntimeError as e:
            # –ò–∑–±–µ–≥–∞–µ–º –æ—à–∏–±–∫–∏ "Cannot run the event loop while another loop is running"
            # –µ—Å–ª–∏ loop —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ
            if "Cannot run the event loop" in str(e):
                 logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å cleanup_tasks: —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –∑–∞–Ω—è—Ç.")
            else:
                 logger.exception("–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è cleanup_tasks.")
        except Exception as e:
            logger.exception("–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è cleanup_tasks.")

        logger.info("–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω.")